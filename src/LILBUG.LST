 AS V1.42 Beta [Bld 239] - Source File LILBUG.ASM - Page 1 - 04/03/2023 07:40:55 PM


       1/       0 :                     ;       OPT    Z01
       2/       0 :                     ;       TTL    6801 DEBUG ; MONITOR *** VER 1.0 ***
       3/       0 :                     ;       NAM    LILBUG
       4/       0 :                     
       5/       0 :                     ;* * * * * * * * * * * * * * * * * * * * * *
       6/       0 :                     ;*                                         *
       7/       0 :                     ;* * * * *        L I L B U G      * * * * *
       8/       0 :                     ;*                                         *
       9/       0 :                     ;*               M O T O R O L A           *
      10/       0 :                     ;*          A U S T I N ,  T E X A S       *
      11/       0 :                     ;*                                         *
      12/       0 :                     ;* * * * * * * * * * * * * * * * * * * * * *
      13/       0 :                     
      14/       0 :                     ;**********************************************
      15/       0 :                     ;* ALTHOUGH THE INFORMATION CONTAINED HEREIN, AS
      16/       0 :                     ;* WELL AS ANY INFORMATION PROVIDED RELATIVE
      17/       0 :                     ;* THERETO, HAS BEEN CAREFULLY REVIEWED AND IS
      18/       0 :                     ;* RELIEVED ACCURATE, MOTOROLA ASSUMES NO LIABILITY
      19/       0 :                     ;* ARISING OUT OF ITS APPLICATION OR USE, NEITHER
      20/       0 :                     ;* DOES IT CONVEY ANY LICENSE UNDER ITS PATENT
      21/       0 :                     ;* RIGHTS NOR THE RIGHTS OF OTHERS.
      22/       0 :                     ;***********************************************
      23/       0 :                     
      24/       0 :                     ;* COPYRIGHT (C) MOTOROLA, INC., 1978
      25/       0 :                     
      26/       0 :                     ;*************** COMMANDS ****************
      27/       0 :                     ;* L   LOAD A PROGRAM FROM TAPE
      28/       0 :                     ;* L <OFFSET>  LOAD FROM TAPE WITH AN OFFSET
      29/       0 :                     ;* V   VERIFY THAT A PROGRAM WAS PROPERLY LOADED
      30/       0 :                     ;* V <OFFSET>  VERIFY PROGRAM LOADED WITH AN OFFSET
      31/       0 :                     ;* D X,Y DISPLAY MEMORY FROM X TO Y
      32/       0 :                     ;* P X,Y PUNCH CONTENTS OF MEMORY FROM X TO Y
      33/       0 :                     ;* M X    MEMORY EXAMINE/MODIFY
      34/       0 :                     ;*       <DATA> CHANGE 1 BYTE IN MEMORY TO (DATA)
      35/       0 :                     ;*       LF  INCR POINTER, PR ADR AND VALUE OF NEW PNTR
      36/       0 :                     ;*       SP  INCR PNTR, PR NEW VALUE OF SAME LINE
      37/       0 :                     ;*       ,   INCR PNTR, NO PR OF ADR OR VALUE
      38/       0 :                     ;*       UA  DECR PNTR, PR ADR AND VALUE AT PNTR
      39/       0 :                     ;*       /   PR ADR AND VALUE OF CURRENT PNTR
      40/       0 :                     ;*       CR  END MEMORY EXAMINE COMMAND
      41/       0 :                     ;* X/  SAVE AS M X, X MUST START W/ 0-9, MAY NEED LEADING
      42/       0 :                     ;* /   PR ADR AND VALUE OF LOC LAST REF WITH MEM/EXAM
      43/       0 :                     ;* O X Y CALCULATE RELATIVE OFFSET FOR BRANCH INSTR
      44/       0 :                     ;* B   DISPLAY ALL BREAKPOINTS
      45/       0 :                     ;* B - DELETE ALL BREAKPOINTS
      46/       0 :                     ;* B X ENTER BREAKPOINT AT ADR X
      47/       0 :                     ;* B -X DELETE BREAKPOINT AT ADR X
      48/       0 :                     ;* G X EXECUTE USER PROG STARTING AT ADR X
      49/       0 :                     ;* G   EXECUTE USER PROG STARTING AT CURRENT PC
      50/       0 :                     ;* R   DISPLAY/CHANGE USER'S PROGRAM REGS
      51/       0 :                     ;* .   TRACE 1 INSTRUCTION
      52/       0 :                     ;* T X   TRACE X INSTRUCTIONS
      53/       0 :                     ;* C EXECUTE USER'S CODE AS SUBR, RTS TO MONITOR
      54/       0 :                     ;* C X XQT USER'D CODE AS SUBR START AT ADR X
      55/       0 :                     ;* HI SET HIGH SPEED - 120 CPS FOR ON-CHIP IO
      56/       0 :                     ;* HY SET HIGHER YET SPEED, FOR CRT - 9600 BD
      57/       0 :                     ;* CONTROL X - TERMINATE D OR T PRINT
      58/       0 :                     ;* CONTROL W - WAIT DURING D OR T PRT, ANY CHAR
      59/       0 :                     ;*    CAUSES CONTINUATION OF PRINT
      60/       0 :                     
 AS V1.42 Beta [Bld 239] - Source File LILBUG.ASM - Page 2 - 04/03/2023 07:40:55 PM


      61/       0 :                     ;* CONTROL CHARACTERS RECOGNIZED DURING PRINT
      62/       0 : =$17                 CNTLW  EQU    $17      ; WAIT CHARACTER
      63/       0 : =$18                 CNTLX  EQU    $18      ; ABORT CHARACTER
      64/       0 :                     ;* ON-CHIP CLOCK EQUATES
      65/       0 : =$1                  P2DDR  EQU    $01      ; PORT 2 DATA DIRECTION REG
      66/       0 : =$9                  CLOCK  EQU    $09      ; TIMER 1
      67/       0 : =$8                  TCSR   EQU    $08      ; TIMER CONTROL STATUS REG
      68/       0 : =$B                  OCREG  EQU    $0B      ; OUTPUT COMPARE REG
      69/       0 :                     ;* ON-CHIP IO EQUATES
      70/       0 : =$10                 RMCR   EQU    $010     ; RATE & MODE CONTROL
      71/       0 : =$11                 TRCS   EQU    $011     ; TRANSMIT/RECEIVE CNTRL STAT REG
      72/       0 : =$12                 RECEV  EQU    $012     ; READ REG
      73/       0 : =$13                 TRANS  EQU    $013     ; TRANSMIT REG
      74/       0 :                     ;* MODE SELECT WORD
      75/       0 : =$3                  MODE   EQU    $03      ; UPPER 3 BITS = MODE
      76/       0 :                     ;* DEFAULT ADDRESS FOR PTM
      77/       0 : =$E000               PTMADR EQU    $E000
      78/       0 :                     
      79/       0 :                     ;*************** RAM STORAGE **************
      80/       0 : =$80                 LOWRAM EQU    $80      ; USED FOR STK OVFLOW CHK
      81/      CF :                            ORG    $CF
      82/      CF :                     STACK  RMB    1        ; STK PNTR WILL RUN UP TOWARD USER C
      83/      D0 :                     
      84/      D0 :                     CT     RMB    1        ; INPUT CHAR CT
      85/      D1 : =$D0                 CKSUM  EQU    CT       ; USED BY LOAD/VERF
      86/      D1 :                     STRTX  RMB    2        ; INPUT CHAR PTR (ON STACK)
      87/      D3 :                     NEXTX  RMB    2        ; NEXT TABLE PTR
      88/      D5 :                     ;* CHRNL - UPPER 6 BITS-# NULLS AFTER CR
      89/      D5 :                     ;*         LOW 2 BITS=# NULLS AFTER CHR
      90/      D5 :                     CHRNL  RMB    1        ; NUM NULLS AFTER CHAR
      91/      D6 :                     BBLK   RMB    1        ; BULK STORE BLK + NXT 4 LOC
      92/      D7 :                     PNTR   RMB    2        ; OPEN ADR
      93/      D9 :                     TEMPA  RMB    2
      94/      DB :                     TEMP   RMB    1
      95/      DC :                     ;* TEMP AND OVFL MUST FOLLOW TENPA
      96/      DC :                     OVFL   RMB    1        ; OVERFLOW FLAG
      97/      DD :                     SAVSTK RMB    2        ; PC
      98/      DF :                            RMB    2        ; X
      99/      E1 :                            RMB    1        ; A
     100/      E2 :                            RMB    1        ; B
     101/      E3 :                            RMB    1        ; CC
     102/      E4 :                     SPSAVE RMB    2        ; STK
     103/      E6 : =$4                  NUMBP  EQU    4        ; NUMBER OF BREAKPOINTS
     104/      E6 :                     BKADR  RMB    NUMBP*2  ; BRKPNT ADDRESS
     105/      EE :                     OPCODE RMB    NUMBP
     106/      F2 :                     BRKFLG RMB    1        ; BRKPNT IN
     107/      F3 :                     NTRACE RMB    2        ; TRACE N INSTR
     108/      F5 :                     EXONE  RMB    1        ; XQT 1 INSTR FLAG
     109/      F6 :                     OUTSW  RMB    1        ; ECHO FLAG
     110/      F7 :                     CALLF  RMB    1        ; FLAG FOR C CMD
     111/      F8 :                     PTM    RMB    2        ; PTM ADDRESS
     112/      FA :                     FCTPTR RMB    2        ; POINTER TO FUNCTION TABLE
     113/      FC :                     IOPTR  RMB    2        ; IO TABLE POINTER
     114/      FE :                     VECPTR RMB    2        ; VECTOR TABLE POINTER
     115/     100 :                     
     116/     100 :                     ;*************** BEGINNING OF ROM ***************
     117/    F800 :                            ORG    $F800
     118/    F800 :                     
     119/    F800 :                     ;* JUMP TABLE TO SUBROUTINES
     120/    F800 : 7E FC 7E            EX.NMI JMP    M.NMI    ; NMI VECTOR FOR PTM
 AS V1.42 Beta [Bld 239] - Source File LILBUG.ASM - Page 3 - 04/03/2023 07:40:55 PM


     121/    F803 : 7E FC 79            IN.NMI JMP    C.NMI    ; NMI VECTOR FOR ON-CHIP TIMER
     122/    F806 : 7E F8 73            INCHNP JMP    INCH1    ; INPUT 1 CHAR W/ NO PARITY
     123/    F809 : 7E F8 8A            OUTCH  JMP    OUTCH1   ; OUTPUT 1 CHAR W/PADDING
     124/    F80C : 7E FB 07                   JMP    PDATA1   ; PRINT DATA STRING
     125/    F80F : 7E FB 0E                   JMP    PDATA    ; PR CR/LF, DATA STRING
     126/    F812 : 7E FA DB                   JMP    OUT2HS   ; PR 2 HEX + SP (X)
     127/    F815 : 7E FA D8                   JMP    OUT4HS   ; PR 4 HEX + SP (X)
     128/    F818 : 7E FB 12                   JMP    PCRLF    ; PRINT CR/LF
     129/    F81B : 7E FA DD                   JMP    SPACE    ; PRINT A SPACE
     130/    F81E : 7E F8 F6            STRT   JMP    START    ; RESTART ADDRESS
     131/    F821 : 7E FD 5F            IN.SWI JMP    M.SWI    ; SWI VECTOR
     132/    F824 :                     
     133/    F824 :                     ;********** COMMAND TABEL **********
     134/    F824 :                     ;* THERE MAY BE AN EXTERNAL TABLE OF THE SAME
     135/    F824 :                     ;*    FORMAT. 'FCTPTR' POINTS TO THE TABLE TO
     136/    F824 :                     ;*    BE SEARCHED FIRST. THE USER CAN DEFINE
     137/    F824 :                     ;*    HIS OWN TABLE AND SET FCTPTR.
     138/    F824 :                     ;*
     139/    F824 :                     ;* EACH ENTRY IN THE TABLE IS AS FOLLOWS:
     140/    F824 :                     ;*     FCB   XXX   XXX=TOTAL SIZE OF ENTRY
     141/    F824 :                     ;*     FCC   /STRING/ STRING IS THE INPUT STRING
     142/    F824 :                     ;*     FDB   ADDR     ADDR IS THE ROUTINE ADDRESS
     143/    F824 :                     ;*
     144/    F824 :                     ;* THE LAST ENTRY IS:
     145/    F824 :                     ;*     -1=END EXTERNAL TABLE,SEARCH INTERNAL TABLE
     146/    F824 :                     ;*     -2=END OF TABLE(S)
     147/    F824 :                     ;*
     148/    F824 :                     ;* NOTE: AN EXTERNAL FUNCTION TABLE TERMINATED BY
     149/    F824 :                     ;*   -1, THE INTERNAL TABLE WILL ALSO BE SEARCHED.
     150/    F824 :                     ;*   IF TERMINATED BY -2, INTERNAL TABLE NOT CHECKED.
     151/    F824 : =$F824               FCTABL EQU    *
     152/    F824 : 04                         FCB    4        ; *
     153/    F825 : 42                         FCC    'B'
     154/    F826 : FB 98                      FDB    BRKPNT
     155/    F828 : 04                         FCB    4        ; *
     156/    F829 : 43                         FCC    'C'
     157/    F82A : FC 0F                      FDB    CALL
     158/    F82C : 04                         FCB    4        ; *
     159/    F82D : 44                         FCC    'D'
     160/    F82E : FD 86                      FDB    DISPLY
     161/    F830 : 04                         FCB    4        ; *
     162/    F831 : 47                         FCC    'G'
     163/    F832 : FC 11                      FDB    GOXQT
     164/    F834 : 04                         FCB    4        ; *
     165/    F835 : 4C                         FCC    'L'
     166/    F836 : FE 9A                      FDB    LOAD
     167/    F838 : 04                         FCB    4        ; *
     168/    F839 : 4D                         FCC    'M'
     169/    F83A : FA 5B                      FDB    MEMORY
     170/    F83C : 04                         FCB    4        ; *
     171/    F83D : 4F                         FCC    'O'
     172/    F83E : FA B4                      FDB    OFFSET
     173/    F840 : 04                         FCB    4        ; *
     174/    F841 : 50                         FCC    'P'
     175/    F842 : FE 72                      FDB    PUNCH
     176/    F844 : 04                         FCB    4        ; *
     177/    F845 : 52                         FCC    'R'
     178/    F846 : FB 1E                      FDB    REGSTR
     179/    F848 : 05                         FCB    5        ; *
     180/    F849 : 48 49                      FCC    'HI'
 AS V1.42 Beta [Bld 239] - Source File LILBUG.ASM - Page 4 - 04/03/2023 07:40:55 PM


     181/    F84B : F8 E9                      FDB    S120
     182/    F84D : 05                         FCB    5        ; *
     183/    F84E : 48 59                      FCC    'HY'
     184/    F850 : F8 F1                      FDB    HY
     185/    F852 : 04                         FCB    4        ; *
     186/    F853 : 54                         FCC    'T'
     187/    F854 : FC 46                      FDB    TRACE
     188/    F856 : 04                         FCB    4        ; *
     189/    F857 : 56                         FCC    'V'
     190/    F858 : FE AB                      FDB    VERF
     191/    F85A : FE                         FCB    -2       ; *END OF TABLE
     192/    F85B :                     
     193/    F85B :                     ;**************** IO TABLE ***************
     194/    F85B :                     ;* ROUTINE IO IS CALLED WITH
     195/    F85B :                     ;* INDEX INTO IO TABLE CI OR INTO USER IO TABLE
     196/    F85B :                     ;* IOPTR POINTS TO THE IO TABLE TO BE USED
     197/    F85B :                     ;* THE INDEX TABLE DEFINES ORDER OF IO ROUTINES IN IO TABL
     198/    F85B : F8 C8 F8 91 F8 D1   CI     FDB    CION,CIDTA,CIOFF
     199/    F861 : F8 D2 F8 A8 F8 D1          FDB    COON,CODTA,COOFF
     200/    F867 : F8 D1 FD EC F8 D1          FDB    HSON,HSDTA,HSOFF
     201/    F86D : FE AF FE C3 FE BA          FDB    BSON,BSDTA,BSOFF
     202/    F873 :                     
     203/    F873 :                     ;* THE FOLLOWING ARE INDICES INTO IO TABLE
     204/    F873 : =$0                  CI.ON  EQU    0        ; INIT INPUT DEVICE
     205/    F873 : =$2                  CI.DTA EQU    2        ; INPUT A CHAR W/NO WAIT
     206/    F873 : =$4                  CI.OFF EQU    4        ; DISABLE INPUT DEVICE
     207/    F873 : =$6                  CO.ON  EQU    6        ; INIT OUTPUT DEVICE
     208/    F873 : =$8                  CO.DTA EQU    8        ; OUTPUT A CHAR W/PADDING
     209/    F873 : =$A                  CO.OFF EQU    $A       ; DISABLE OUTPUT DEVICE
     210/    F873 : =$C                  HS.ON  EQU    $C       ; INIT HIGH SPEED OUTPUT DEVICE
     211/    F873 : =$E                  HS.DTA EQU    $E       ; OUTPUT BLOCK OF DATA
     212/    F873 : =$10                 HS.OFF EQU    $10      ; DISABLE HIGH SPEED DEVICE
     213/    F873 : =$12                 BS.ON  EQU    $12      ; INIT PUNCH/LOAD
     214/    F873 : =$14                 BS.DTA EQU    $14      ; WRITE DATA BLK TO PNCH/LOAD
     215/    F873 : =$16                 BS.OFF EQU    $16      ; DISABLE PUNCH/LOAD
     216/    F873 :                     ;*
     217/    F873 :                     ;************** INCH **************
     218/    F873 :                     ;* CALL IO ROUTINE W/ INDEX TO INPUT DATA
     219/    F873 :                     ;* CLEARS PARITY
     220/    F873 :                     ;* IGNORES RUBOUT CHAR
     221/    F873 :                     ;* ECHOES OUTPUT IF FLAG CLEAR
     222/    F873 :                     ;* SAVE, RESTORE REG B
     223/    F873 : 37                  INCH1  PSHB
     224/    F874 : C6 02               INCH15 LDAB   #CI.DTA  ; OFFSET TO CIDATA
     225/    F876 : 8D 67               INCH2  BSR    IO       ; SCAN IO DEVICE
     226/    F878 : 24 FA                      BCC    INCH15   ; LOOP ON NO WAIT INPUT
     227/    F87A : 84 7F                      ANDA   #$7F     ; CLEAR PARITY
     228/    F87C : 27 F6                      BEQ    INCH15   ; IGNORE NULLS
     229/    F87E : 81 7F                      CMPA   #$7F     ; RUBOUT?
     230/    F880 : 27 F2                      BEQ    INCH15
     231/    F882 : D6 F6                      LDAB   OUTSW    ; CHK IF ECHO
     232/    F884 : 26 02                      BNE    INCH4
     233/    F886 : 8D 02                      BSR    OUTCH1   ; ECHO INPUT
     234/    F888 : 33                  INCH4  PULB
     235/    F889 : 39                         RTS
     236/    F88A :                     
     237/    F88A :                     ;*************** OUTCH ***************
     238/    F88A :                     ;* CALL IO ROUTINE W/ INDEX TO OUTPUT DATA
     239/    F88A :                     ;* SAVES, RESTORES REG B
     240/    F88A : 37                  OUTCH1 PSHB
 AS V1.42 Beta [Bld 239] - Source File LILBUG.ASM - Page 5 - 04/03/2023 07:40:55 PM


     241/    F88B : C6 08                      LDAB   #CO.DTA  ; PNTR TO OUTPUT A CHAR W/PADDING
     242/    F88D : 8D 50                      BSR    IO
     243/    F88F : 33                         PULB
     244/    F890 : 39                         RTS
     245/    F891 :                     
     246/    F891 :                     ;*************** CIDTA ***************
     247/    F891 :                     ;* READ 1 CHAR FROM INPUT W/ NO WAIT
     248/    F891 :                     ;* RETURN W/ C CLEAR IF NO READ
     249/    F891 :                     ;*     ELSE REG A = INPUT & C IS SET
     250/    F891 : 96 11               CIDTA  LDAA   TRCS     ; GET CONTROL WORD
     251/    F893 : 48                         ASLA            ; CHK THAT RDRF IS SET
     252/    F894 : 25 03                      BCS    CIDTA1   ; READ DATA IF SET
     253/    F896 : 48                         ASLA            ; LOOK AT ERR BIT
     254/    F897 : 24 03                      BCC    CIDTA2   ; RTN W/C CLR IF NO READ
     255/    F899 :                     ;* IF FRAMING ERR OR OVER RUN-READ
     256/    F899 : 96 12               CIDTA1 LDAA   RECEV    ; READ
     257/    F89B :                     ;* RETURN W/CARRY SET & LDAA BITS SET
     258/    F89B : 0D                         SEC             ; FLAG READ-NO WAIT ACOMPLISHD
     259/    F89C : 39                  CIDTA2 RTS
     260/    F89D :                     
     261/    F89D :                     ;********** CODTA **********
     262/    F89D :                     ;* OUTPUT CHAR FROM REG A
     263/    F89D :                     ;* OUTC - SUBR CALLED BY CODTA
     264/    F89D :                     ;* EXPECT 30 OR 120 CPS
     265/    F89D :                     ;* DEFAULT SPEED = 30 CPS
     266/    F89D :                     ;* PADS CR AND CHAR FOR 120
     267/    F89D :                     ;* PAD 4 NULLS IF PUNCH CR
     268/    F89D : 37                  OUTC   PSHB
     269/    F89E : D6 11               OUTC1  LDAB   TRCS     ; GET CONTRL WRD
     270/    F8A0 : C5 20                      BITB   #$20     ; TDRE SET?
     271/    F8A2 : 27 FA                      BEQ    OUTC1    ; WAIT UNTIL IT IS
     272/    F8A4 : 97 13                      STAA   TRANS
     273/    F8A6 : 33                         PULB
     274/    F8A7 : 39                  CRTN   RTS
     275/    F8A8 :                     
     276/    F8A8 : 8D F3               CODTA  BSR    OUTC     ; OUTPUT CHAR
     277/    F8AA : D6 F6                      LDAB   OUTSW    ; GET TAPE FLAG
     278/    F8AC : 26 02                      BNE    N1
     279/    F8AE : D6 D5                      LDAB   CHRNL    ; NO TAPE
     280/    F8B0 : 81 0D               N1     CMPA   #$D      ; CR
     281/    F8B2 : 27 08                      BEQ    N3
     282/    F8B4 : 81 10                      CMPA   #$10     ; NO PADDING IF DLE
     283/    F8B6 : 27 EF                      BEQ    CRTN
     284/    F8B8 : C4 03                      ANDB   #$3      ; MASK OUT HIGH 6-BIT CNTR
     285/    F8BA : 20 02                      BRA    N4
     286/    F8BC : 54                  N3     LSRB            ; REMOVE LOW 2-BIT CNTR
     287/    F8BD : 54                         LSRB
     288/    F8BE : 5A                  N4     DECB            ; DECR NULL CNTR
     289/    F8BF : 2B E6                      BMI    CRTN     ; EXIT IF ENOUGH NULLS
     290/    F8C1 : 36                         PSHA
     291/    F8C2 : 4F                         CLRA
     292/    F8C3 : 8D D8                      BSR    OUTC     ; OUTPUT NULL
     293/    F8C5 : 32                         PULA
     294/    F8C6 : 20 F6                      BRA    N4       ; PR NXT NULL
     295/    F8C8 :                     
     296/    F8C8 :                     ;*************** CION ***************
     297/    F8C8 :                     ;* INITIALIZE ON-CHIP SERIAL IO
     298/    F8C8 : CC 10 07            CION   LDD    #$1007   ; SET PADDING FOR 300
     299/    F8CB : 8D 1F                      BSR    S1205    ; SET RMCR
     300/    F8CD : 86 0A                      LDAA   #$0A     ; SET TRCS FOR ON-CHP IO
 AS V1.42 Beta [Bld 239] - Source File LILBUG.ASM - Page 6 - 04/03/2023 07:40:55 PM


     301/    F8CF : 97 11                      STAA   TRCS
     302/    F8D1 :                     ;* NO ACTION NEEDED BY THESE DEVICES
     303/    F8D1 : =$F8D1               CIOFF  EQU    *        ; TURN CONSOLE IN OFF
     304/    F8D1 : =$F8D1               HSON   EQU    *        ; TURN ON HIGH SPEED
     305/    F8D1 : =$F8D1               HSOFF  EQU    *        ; TURN OFF HIGH SPEED
     306/    F8D1 : 39                  COOFF  RTS
     307/    F8D2 :                     
     308/    F8D2 :                     ;*************** COON ***************
     309/    F8D2 :                     ;* INITIALIZE OUTPUT DEVICE-SILENT 700 PRT
     310/    F8D2 :                     ;* TURN ON TI PRINTER
     311/    F8D2 : CE FF 86            COON   LDX    #PRTON   ; ACTIVATE ACD
     312/    F8D5 : BD FB 07            COON2  JSR    PDATA1
     313/    F8D8 :                     ;* ENTRY FROM BSOFF FOR DELAY AFTER TURN OFF PUNCH
     314/    F8D8 : CE 41 1B            DELAY  LDX    #$411B   ; 100 MS DELAY
     315/    F8DB : 09                  DLY    DEX
     316/    F8DC : 26 FD                      BNE    DLY
     317/    F8DE : 39                         RTS
     318/    F8DF :                     ;*
     319/    F8DF :                     ;*************** IO ROUTINE ***************
     320/    F8DF :                     ;* THIS ROUTINE USES INDEX TO RETRIEVE IO
     321/    F8DF :                     ;* ROUTINE ADR FROM IO TABLE, THEN CALL AS SUBR
     322/    F8DF :                     ;* REG B IS INDEX INTO IO TABLE
     323/    F8DF :                     ;* TO DO IO, REG B IS SET, IO ROUTINE IS CALLED
     324/    F8DF :                     ;* SAVES REG X
     325/    F8DF : 3C                  IO     PSHX
     326/    F8E0 : DE FC                      LDX    IOPTR    ; ADR OF IO TABLE
     327/    F8E2 : 3A                         ABX             ; ADD OFFSET
     328/    F8E3 : EE 00                      LDX    0,X      ; GET IO ROUTINE ADR
     329/    F8E5 : AD 00                      JSR    0,X      ; DO IO
     330/    F8E7 : 38                         PULX
     331/    F8E8 : 39                         RTS
     332/    F8E9 :                     
     333/    F8E9 :                     ;************** HY / HI *************
     334/    F8E9 :                     ;* HY & HI SET CHRNL FLAG FOR PADDING
     335/    F8E9 :                     ;* AND SET ON-CHIP SERIAL IO RMCR
     336/    F8E9 :                     ;* LOW 2 BITS = NUM NULLS AFTER CHAR
     337/    F8E9 :                     ;* HIGH 6 BITS = NUM NULLS AFTER CR
     338/    F8E9 :                     
     339/    F8E9 :                     ;************** HI **************
     340/    F8E9 :                     ;* SET SPEED FOR 120 CPS
     341/    F8E9 :                     ;* SET # NULLS TO PAD CHAR
     342/    F8E9 :                     ;* SET BITS FOR 1200 BAUD IN RMCR
     343/    F8E9 : CC 4F 06            S120   LDD    #$4F06
     344/    F8EC : 97 D5               S1205  STAA   CHRNL
     345/    F8EE : D7 10                      STAB   RMCR     ; SET BAUD RATE
     346/    F8F0 : 39                         RTS
     347/    F8F1 :                     
     348/    F8F1 :                     ;*************** HY ***************
     349/    F8F1 :                     ;* HIGHER YET - 9600 BAUD ON CRT
     350/    F8F1 :                     ;* SET PADDING TO ZERO
     351/    F8F1 : CC 00 05            HY     LDD    #$0005   ; ALSO SET RMCR
     352/    F8F4 : 20 F6                      BRA    S1205
     353/    F8F6 :                     
     354/    F8F6 :                     
     355/    F8F6 :                     ;********** RESET **********
     356/    F8F6 :                     ;* COME HERE FOR MONITOR RESTART
     357/    F8F6 :                     ;* INIT IO & FCN TABLE POINTERS
     358/    F8F6 :                     ;* TURN ON CONSOLE
     359/    F8F6 :                     ;* PRINT MONITOR NAME
     360/    F8F6 :                     ;* INIT RAM USED BY MONITOR
 AS V1.42 Beta [Bld 239] - Source File LILBUG.ASM - Page 7 - 04/03/2023 07:40:55 PM


     361/    F8F6 :                     ;* MASK I BIT IN USER CC
     362/    F8F6 :                     ;* SET INITIAL SPEED
     363/    F8F6 :                     ;* INIT HARDWARE TRACE DEVICE
     364/    F8F6 : 8E 00 CF            START  LDS    #STACK   ; INIT STK PNTR
     365/    F8F9 : CE F8 5B                   LDX    #CI      ; INIT I/O PNTR TABLE
     366/    F8FC : DF FC                      STX    IOPTR
     367/    F8FE : CE FF C8                   LDX    #SERIAL  ; INIT VECTOR TABLE POINTER
     368/    F901 : DF FE                      STX    VECPTR
     369/    F903 : CE F8 24                   LDX    #FCTABL  ; INIT FUNCTION TABLE PTR
     370/    F906 : DF FA                      STX    FCTPTR
     371/    F908 : CE E0 00                   LDX    #PTMADR  ; SET ADR FOR PTM
     372/    F90B : DF F8                      STX    PTM
     373/    F90D : 8E 00 BB                   LDS    #STACK-20 ; RESET INCASE USER DIDN'T
     374/    F910 : 9F E4                      STS    SPSAVE   ; INIT USER STACK
     375/    F912 : 8E 00 CF                   LDS    #STACK   ; RESET MONITOR STK
     376/    F915 : CE 00 E6                   LDX    #BKADR   ; ZERO BKADR TO OVFL
     377/    F918 : 6F 00               CLRAM  CLR    0,X
     378/    F91A : 08                         INX
     379/    F91B : 8C 00 F8                   CPX    #CALLF+1
     380/    F91E : 26 F8                      BNE    CLRAM
     381/    F920 : 5F                         CLRB            ; OFFSET FOR CION
     382/    F921 : 8D BC                      BSR    IO       ; TURN ON CONSOLE IN
     383/    F923 : C6 06                      LDAB   #CO.ON   ; OFFSET FOR COON
     384/    F925 : 8D B8                      BSR    IO       ; TURN ON CONSOLE OUTPUT
     385/    F927 : CE FF 90                   LDX    #LIL     ; PR LILBUG
     386/    F92A : BD FB 0E                   JSR    PDATA    ; WITH CR/LF
     387/    F92D : 86 D0                      LDAA   #$D0     ; MASK I IN CC
     388/    F92F : 97 E3                      STAA   SAVSTK+6
     389/    F931 :                     
     390/    F931 :                     
     391/    F931 :                     ;* INIT FOR HARDWARE TRACE -
     392/    F931 :                     ;*    CLOCK OR PTM
     393/    F931 : BD FC EA                   JSR    IFPTM
     394/    F934 : 27 0A                      BEQ    INPTM    ; GO INIT PTM
     395/    F936 :                     ;* INIT ON-CHIP CLOCK
     396/    F936 : 8C F8 03                   CPX    #IN.NMI  ; MAY NOT WANT ANY TRACE
     397/    F939 : 26 17                      BNE    MAIN     ; IF NMI NOT SET-NO TRACE
     398/    F93B : 7C 00 08                   INC    TCSR     ; SET OLVL BIT HI
     399/    F93E : 20 12                      BRA    MAIN
     400/    F940 :                     ;* INIT PTM - SINGLE SHOT, 8 BIT
     401/    F940 :                     ;* USER MUST SET NMI VCTR FOR PTM TRACE
     402/    F940 :                     ;* MONITOR CHK IF VCTR SET
     403/    F940 : DE F8               INPTM  LDX    PTM      ; GET PTM ADDRESS
     404/    F942 : 6F 02                      CLR    2,X      ; SET LATCH FOR BRING OUT
     405/    F944 : 6F 03                      CLR    3,X      ; OF RESET, MAKE G HI
     406/    F946 : CC 01 22                   LDD    #$0122
     407/    F949 : A7 01                      STAA   1,X      ; SET TO WRITE TO CR1
     408/    F94B : E7 00                      STAB   0,X      ; BRING OUT OF RESET
     409/    F94D : CC A6 00                   LDD    #$A600   ; SET SINGLE SHOT MODE
     410/    F950 : ED 00                      STD    0,X      ; ALSO SET NO WRITE TO CR1
     411/    F952 :                     ;*
     412/    F952 :                     ;*************** MAIN ***************
     413/    F952 :                     ;* PROMPT USER
     414/    F952 :                     ;* READ NEXT COMMAND
     415/    F952 : 8E 00 CF            MAIN   LDS    #STACK
     416/    F955 : 7F 00 F6                   CLR    OUTSW    ; MAKE SURE INPUT IS ECHOED
     417/    F958 : BD FB 12                   JSR    PCRLF    ; PRINT CR/LF
     418/    F95B : 86 21                      LDAA   #'!'
     419/    F95D : BD F8 09                   JSR    OUTCH
     420/    F960 : BD FA 09                   JSR    INPUTA   ; A-F ALPHA
 AS V1.42 Beta [Bld 239] - Source File LILBUG.ASM - Page 8 - 04/03/2023 07:40:55 PM


     421/    F963 : 2B ED                      BMI    MAIN     ; ABORT
     422/    F965 : 27 0A                      BEQ    MAIN01
     423/    F967 :                     ;* HEX VALIDITY CHK
     424/    F967 : BD F9 FC                   JSR    VALIN
     425/    F96A : 2B E6                      BMI    MAIN     ; <ADR>/ VALID?
     426/    F96C : CE FA 5F                   LDX    #MEM01   ; ENTER MEMORY ROUTINE
     427/    F96F : 20 74                      BRA    MAIN08   ; SET UP FOR RTN
     428/    F971 :                     ;* A CONTAINS FIRST INPUT CHARACTER
     429/    F971 : CE FC 41            MAIN01 LDX    #NEXT    ; CHK FOR TRACE 1
     430/    F974 : 81 2E                      CMPA   #'.'     ; QUICK TRACE
     431/    F976 : 27 6D                      BEQ    MAIN08
     432/    F978 : CE FA A8                   LDX    #MEMSL   ; CHK FOR /
     433/    F97B : 81 2F                      CMPA   #'/'     ; QUICK MEM EXAMINE
     434/    F97D : 27 66                      BEQ    MAIN08
     435/    F97F :                     ;*
     436/    F97F :                     ;* READ IN STRING, PUSH STRING UNTO THE
     437/    F97F :                     ;*   STACK. MARK TO OF STRING IN 'STRTX'
     438/    F97F :                     ;*
     439/    F97F : 9F D1                      STS    STRTX    ; SAVE PTR TO INPUT STRING
     440/    F981 : 7F 00 D0                   CLR    CT       ; INPUT CHAR CT
     441/    F984 : 8D 65               MAIN03 BSR    TERM     ; CHECK FOR TERMINATORS
     442/    F986 : 27 13                      BEQ    SRCH     ; GOT ONE,GO DO COMPARES
     443/    F988 : 7C 00 D0                   INC    CT       ; CT + 1 -> CT
     444/    F98B : 36                         PSHA            ; SAVE INPUT CHAR ON STACK
     445/    F98C : 30                         TSX             ; CHECK STACK POINTER
     446/    F98D : 8C 00 80                   CPX    #LOWRAM
     447/    F990 : 27 2B                      BEQ    MERROR   ; CHK IF END OF STK
     448/    F992 : BD FA 09                   JSR    INPUTA   ; GO GET NEXT CHAR
     449/    F995 : 2B 2C                      BMI    MAIN07   ; ESCAPE
     450/    F997 : 26 24                      BNE    MERROR   ; NBRS ARE NOT ALLOWED
     451/    F999 : 20 E9                      BRA    MAIN03   ; LOOP
     452/    F99B :                     ;*
     453/    F99B :                     ;* HERE AFTER STRING WAS INPUT. CHECK IT AGAINST
     454/    F99B :                     ;*   STRINGS IN THE EXTERNAL AND/OR INTERNAL
     455/    F99B :                     ;*   FUNCTION TABLES. STRTX POINTS TO THE
     456/    F99B :                     ;*   INPUT STRING. FCTPTR POINTS TO THE START
     457/    F99B :                     ;*   OF THE FIRST TABLE TO SEARCH (EXTERNAL OR
     458/    F99B :                     ;*   INTERNAL).
     459/    F99B :                     ;*
     460/    F99B : 97 D6               SRCH   STAA   BBLK     ; LOCAL VAR - SAVE DELIMITER
     461/    F99D : DE FA                      LDX    FCTPTR   ; GET PTR TO TABLE
     462/    F99F : DF D3                      STX    NEXTX    ; SAVE IN TEMP
     463/    F9A1 : DE D3               SRCH01 LDX    NEXTX    ; GET NEXT PTR INTO TABLE
     464/    F9A3 : 3C                         PSHX            ; SAVE A COPY ON STACK
     465/    F9A4 : E6 00                      LDAB   0,X      ; GET ENTRY SIZE
     466/    F9A6 : 3A                         ABX             ; CALCULATE ADDR OF NEXT ENTRY
     467/    F9A7 : DF D3                      STX    NEXTX    ; SAVE FOR NEXT SEARCH
     468/    F9A9 : C0 03                      SUBB   #3       ; SUB OFF ADDR SIZE
     469/    F9AB : D1 D0                      CMPB   CT       ; IS INPUT LENGTH=ENTRY LENGTH?
     470/    F9AD : 27 16                      BEQ    SRCH03   ; YES,A POSSIBLE MATCH
     471/    F9AF :                     ;* NO MATCH ON THIS ENTRY
     472/    F9AF :                     ;* CHECK FOR TABLE TERMINATORS
     473/    F9AF :                     ;* -1 = END OF EXTERNAL TABLE
     474/    F9AF :                     ;* -2 = END OF TABLE(S)
     475/    F9AF :                     ;* IF NOT -1 OR -2, NOT RECOGNIZE END OF TABLE
     476/    F9AF :                     ;* B IS ALREADY TERM-3
     477/    F9AF : 38                         PULX            ; CLEAN STACK
     478/    F9B0 : C1 FC                      CMPB   #-4      ; END OF EXTERNAL TABLE?
     479/    F9B2 : 26 05                      BNE    SRCH02   ; NO
     480/    F9B4 :                     ;* SWITCH FROM EXT TO INT TABLE
 AS V1.42 Beta [Bld 239] - Source File LILBUG.ASM - Page 9 - 04/03/2023 07:40:55 PM


     481/    F9B4 : CE F8 24                   LDX    #FCTABL  ; GET INNER TABLE
     482/    F9B7 : DF D3                      STX    NEXTX
     483/    F9B9 : C1 FB               SRCH02 CMPB   #-5      ; END OF TABLE SEARCH?
     484/    F9BB : 26 E4                      BNE    SRCH01   ; NO,KEEP TRUCKIN
     485/    F9BD :                     ;* INPUT STRING NOT FOUND ! GO GRIPE
     486/    F9BD :                     ;* HERE ON ERROR. PRINT ? AND
     487/    F9BD :                     ;*   GO BACK TO MAIN START
     488/    F9BD : CE FF 8E            MERROR LDX    #QMARK
     489/    F9C0 : BD FB 0E                   JSR    PDATA
     490/    F9C3 : 20 8D               MAIN07 BRA    MAIN
     491/    F9C5 :                     ;*
     492/    F9C5 :                     ;* INPUT LENGTH=TABLE ENTRY LENGTH. TRY
     493/    F9C5 :                     ;*   FOR A MATCH. B=SIZE; (SP) = TABLE PTR
     494/    F9C5 :                     ;*
     495/    F9C5 : DE D1               SRCH03 LDX    STRTX    ; INIT PTR TO INPUT STRING
     496/    F9C7 : DF D9                      STX    TEMPA
     497/    F9C9 : 38                  SRCH04 PULX            ; RESTORE CURRENT TABLE PTR
     498/    F9CA : 08                         INX
     499/    F9CB : A6 00                      LDAA   0,X      ; GET TABLE CHAR
     500/    F9CD : 3C                         PSHX            ; SAVE FOR NEXT LOOP
     501/    F9CE : DE D9                      LDX    TEMPA    ; GET INPUT PTR
     502/    F9D0 : A1 00                      CMPA   0,X      ; INPUT CHAR=TABLE CHAR?
     503/    F9D2 : 27 03                      BEQ    SRCH05   ; YES
     504/    F9D4 : 38                         PULX            ; NO,CLEAN STACK
     505/    F9D5 : 20 CA                      BRA    SRCH01   ; GET NEXT TABLE VALUE
     506/    F9D7 :                     ;* HERE WHEN A CHARACTER MATCHED
     507/    F9D7 : 09                  SRCH05 DEX             ; DEC INPUT PTR FOR NEXT TIME
     508/    F9D8 : DF D9                      STX    TEMPA
     509/    F9DA : 5A                         DECB            ; COMPARED ALL CHARS?
     510/    F9DB : 26 EC                      BNE    SRCH04
     511/    F9DD :                     ;*
     512/    F9DD :                     ;* WE HAVE A MATCH! GO TO THE ROUTINE
     513/    F9DD :                     ;*
     514/    F9DD : 38                         PULX            ; GET TABLE PTR
     515/    F9DE : 08                         INX             ; POINT TO ADDRESS IN TABLE
     516/    F9DF : 9E D1                      LDS    STRTX    ; CLEAN STACK
     517/    F9E1 : EE 00                      LDX    0,X      ; GET ROUTINE ADDRESS
     518/    F9E3 : 96 D6                      LDAA   BBLK     ; LOAD TERMINATOR
     519/    F9E5 : AD 00               MAIN08 JSR    0,X      ; GO TO ROUTINE
     520/    F9E7 : 2B D4                      BMI    MERROR   ; ERROR RETURN
     521/    F9E9 : 20 D8                      BRA    MAIN07   ; GO BACK TO MAIN
     522/    F9EB :                     ;********** TERMINATOR SUB
     523/    F9EB :                     ;*
     524/    F9EB :                     ;* CHECK INPUT CHAR FOR A TERMINATOR
     525/    F9EB :                     ;*   TERMINATORS ARE: , BLANK <CR>
     526/    F9EB :                     ;*   CHAR IN A ON CALL
     527/    F9EB :                     ;*   Z BIT SET ON EXIT IFF CHAR WAS
     528/    F9EB :                     ;*   TERMINATOR
     529/    F9EB : 81 2C               TERM   CMPA   #','     ; COMMA?
     530/    F9ED : 27 0A                      BEQ    TERM02
     531/    F9EF : 81 20                      CMPA   #' '     ; BLANK?
     532/    F9F1 : 27 06                      BEQ    TERM02
     533/    F9F3 : 81 0D                      CMPA   #$D      ; CR?
     534/    F9F5 : 27 02                      BEQ    TERM02
     535/    F9F7 : 81 2D                      CMPA   #'-'     ; ALLOW MINUS
     536/    F9F9 : 39                  TERM02 RTS             ; RETURN WITH Z BIT
     537/    F9FA :                     ;*
     538/    F9FA :                     
     539/    F9FA :                     ;*************** VALIN ***************
     540/    F9FA :                     ;* VALIDATE INPUT - ENTRY VALINP READS INPUT
 AS V1.42 Beta [Bld 239] - Source File LILBUG.ASM - Page 10 - 04/03/2023 07:40:55 PM


     541/    F9FA :                     ;* ALLOW 4 DIGIT INPUT W/LEADING 0'S NOT COUNT
     542/    F9FA :                     ;* SET CC NEG IF ERROR
     543/    F9FA : 8D 11               VALINP BSR    INPUT    ; READ HEX
     544/    F9FC : 2F 0A               VALIN  BLE    VALRTN
     545/    F9FE : 81 04                      CMPA   #4
     546/    FA00 : 2F 3A                      BLE    INPUTC
     547/    FA02 : 7D 00 DC                   TST    OVFL     ; LEADING ZEROES?
     548/    FA05 : 27 35                      BEQ    INPUTC
     549/    FA07 : 53                         COMB            ; SET C NEG FOR ERR RTN
     550/    FA08 : 39                  VALRTN RTS
     551/    FA09 :                     
     552/    FA09 :                     ;***** INPUT - READ ROUTINE
     553/    FA09 :                     ;* INPUT ENTRY SET B=0, READ A-F AS HEX
     554/    FA09 :                     ;* INPUTA ENTRY SET B#0, READ A-F AS ALPHA
     555/    FA09 :                     ;* X= HEX NUMBER (ALSO IN TEMPA)
     556/    FA09 :                     ;* A=LAST CHAR READ (NON-HEX)
     557/    FA09 :                     ;* B= # HEX CHAR READ (TEMP_
     558/    FA09 :                     ;* OVFL # 0 IF OVERFLOW FROM LEFT SHIFT
     559/    FA09 :                     ;* CC SET FROM LDAB BEFORE RETURN
     560/    FA09 :                     ;* CC SET NEG IF ABORT
     561/    FA09 :                     ;*
     562/    FA09 : C6 F0               INPUTA LDAB   #$F0     ; READ A-F AS ALHPA
     563/    FA0B : 20 01                      BRA    INPUT2
     564/    FA0D : 5F                  INPUT  CLRB            ; READ A-F AS HEX
     565/    FA0E : CE 00 00            INPUT2 LDX    #0       ; INIT VAR TO 0
     566/    FA11 : DF D9                      STX    TEMPA
     567/    FA13 : DF DB                      STX    TEMP     ; 0 TTEMP, OVFL
     568/    FA15 : CE 00 D9                   LDX    #TEMPA   ; X PNY TO WW INPUT CHR STORED
     569/    FA18 : 8D 25               INPUT3 BSR    INHEX    ; READ A CHAR
     570/    FA1A : 2B 17                      BMI    INPUT7   ; JMP IF NOT HEX
     571/    FA1C : C6 04                      LDAB   #4
     572/    FA1E : 68 01               INPUT5 ASL    1,X
     573/    FA20 : 69 00                      ROL    0,X
     574/    FA22 : 24 03                      BCC    INPUT6   ; SET FLAG IF OVERFLOW
     575/    FA24 : 7C 00 DC                   INC    OVFL
     576/    FA27 : 5A                  INPUT6 DECB            ; LEFT SHIFT 4 BITS
     577/    FA28 : 26 F4                      BNE    INPUT5
     578/    FA2A : AA 01                      ORAA   1,X      ; ADD IN LSB
     579/    FA2C : A7 01                      STAA   1,X
     580/    FA2E : 7C 00 DB                   INC    TEMP
     581/    FA31 : 20 E5                      BRA    INPUT3
     582/    FA33 : 81 18               INPUT7 CMPA   #CNTLX   ; CHK IF ABORT
     583/    FA35 : 26 03                      BNE    INPUT9   ; SKIP IF NOT ABORT
     584/    FA37 : =$FA37               NOTHEX EQU    *        ; ERROR ENTRY FROM INHEX
     585/    FA37 : C6 FF                      LDAB   #$FF     ; SET CC NEG
     586/    FA39 : 39                         RTS
     587/    FA3A : DE D9               INPUT9 LDX    TEMPA    ; SET REG X=# READ
     588/    FA3C : D6 DB               INPUTC LDAB   TEMP     ; SET REG B=# HEX CHAR READ
     589/    FA3E : 39                         RTS
     590/    FA3F :                     
     591/    FA3F :                     ;*************** INHEX ****************
     592/    FA3F :                     ;* INPUT 1 HEX CHAR, CONVERT TO HEX
     593/    FA3F :                     ;* RETURN HEX IN REG A
     594/    FA3F :                     ;* REG B = 0 CONVERT A-F TO HEX
     595/    FA3F :                     ;* REG B < 0 LEAVE A-F ALPHA
     596/    FA3F : BD F8 06            INHEX  JSR    INCHNP   ; (INHEX) MUST BE NEG
     597/    FA42 : 81 30                      CMPA   #'0'
     598/    FA44 : 2B F1                      BMI    NOTHEX   ; NOT HEX
     599/    FA46 : 81 39                      CMPA   #'9'
     600/    FA48 : 2F 0D                      BLE    IN1HG    ; GOOD
 AS V1.42 Beta [Bld 239] - Source File LILBUG.ASM - Page 11 - 04/03/2023 07:40:55 PM


     601/    FA4A : 5D                         TSTB            ; A-F NUMBERS?
     602/    FA4B : 2B EA                      BMI    NOTHEX   ; NO
     603/    FA4D : 81 41                      CMPA   #'A'
     604/    FA4F : 2B E6                      BMI    NOTHEX   ; NOT HEX
     605/    FA51 : 81 46                      CMPA   #'F'
     606/    FA53 : 2E E2                      BGT    NOTHEX   ; NOT HEX
     607/    FA55 : 80 07                      SUBA   #7
     608/    FA57 : 84 0F               IN1HG  ANDA   #$F
     609/    FA59 : 5F                         CLRB            ; AFTER FIND 0-9 CLEARR
     610/    FA5A : 39                         RTS             ; GOOD HEX - RTN
     611/    FA5B :                     
     612/    FA5B :                     ;************* MEMORY EXAMINE/CHANGE ***************
     613/    FA5B :                     ;* PRINT VALUE AT <ADR>, MAINTAIN PNTR
     614/    FA5B :                     ;* M <ADR>(SPACE)
     615/    FA5B :                     ;* <ADR>/
     616/    FA5B :                     ;* <ADR> IS 1-4 HEX, NOT COUNTING LEADING ZEROES
     617/    FA5B :                     ;* SUBCOMMANDS
     618/    FA5B :                     ;*      <DATA> MODIFY VALLUE AT CURRENT LOC
     619/    FA5B :                     ;*      SP     INCR POINTER, PR VALUE AT NEXT ADR
     620/    FA5B :                     ;*      ,      INCR PNTR, NO PRINT
     621/    FA5B :                     ;*      LF     INCR PNTR, PR ADR & VALUE ON NEXT LINE
     622/    FA5B :                     ;*      UA     DECR PNTR, PR ADR & VALUE ON NEXT LINE
     623/    FA5B :                     ;*      /      PR CURRENT ADR AND VALUE
     624/    FA5B :                     ;*      CR     TERMINATE MEM/EXAM COMMAND
     625/    FA5B : 8D 9D               MEMORY BSR    VALINP
     626/    FA5D : 2F 52                      BLE    MERRTN   ; NOT HEX - ERROR
     627/    FA5F : DE D9               MEM01  LDX    TEMPA    ; PRESET FOR ADR/
     628/    FA61 : 81 2F                      CMPA   #'/'     ; / DELIMITER?
     629/    FA63 : 27 04                      BEQ    MEM02
     630/    FA65 : 81 20                      CMPA   #$20     ; SPACE?
     631/    FA67 : 26 48                      BNE    MERRTN
     632/    FA69 : 8D 76               MEM02  BSR    OUT2H    ; PRINT VALUE
     633/    FA6B : DF D7               MEM25  STX    PNTR
     634/    FA6D : 3C                         PSHX
     635/    FA6E : 5F                         CLRB            ; A-F NUMBER FLAG
     636/    FA6F : 8D 9C                      BSR    INPUT    ; X=ADR
     637/    FA71 : 38                         PULX
     638/    FA72 : 2B 3F                      BMI    RETRN    ; IF NEG - ABORT
     639/    FA74 : 27 07                      BEQ    MEM03    ; JUMP IF NOT HEX
     640/    FA76 : D6 DA                      LDAB   TEMPA+1  ; GET LAST BYTE
     641/    FA78 : BD FA F7                   JSR    STRCHK   ; STORE B AND CHK FOR CHG MEM
     642/    FA7B : 2B 36                      BMI    RETRN    ; ERR IN CHG MEMORY
     643/    FA7D : 81 0D               MEM03  CMPA   #$D      ; CR?
     644/    FA7F : 27 32                      BEQ    RETRN    ; END MEM/EX?
     645/    FA81 :                     ;*** X = ADR OF CURRENT BYTE
     646/    FA81 : 81 2C                      CMPA   #','     ; COMMA?
     647/    FA83 : 26 03                      BNE    MEM33
     648/    FA85 : 08                         INX             ; OPEN NEXT LOC, DO NOT PR
     649/    FA86 : 20 E3                      BRA    MEM25
     650/    FA88 : 81 20               MEM33  CMPA   #$20     ; SPACE?
     651/    FA8A : 26 03                      BNE    MEM04
     652/    FA8C : 08                         INX             ; INCR PNTR
     653/    FA8D : 20 DA                      BRA    MEM02    ; GO PR VALUE
     654/    FA8F : 81 0A               MEM04  CMPA   #$A      ; LF?
     655/    FA91 : 26 06                      BNE    MEM06
     656/    FA93 : 08                         INX
     657/    FA94 : BD FB 16                   JSR    PCR      ; OUT CR, NO LF
     658/    FA97 : 20 0D                      BRA    MEM12    ; PR ADDR,SPACE
     659/    FA99 : 81 5E               MEM06  CMPA   #$5E     ; UA?
     660/    FA9B : 26 03                      BNE    MEM08
 AS V1.42 Beta [Bld 239] - Source File LILBUG.ASM - Page 12 - 04/03/2023 07:40:55 PM


     661/    FA9D : 09                         DEX
     662/    FA9E : 20 04                      BRA    MEM10
     663/    FAA0 : 81 2F               MEM08  CMPA   #'/'     ; SLASH?
     664/    FAA2 : 26 0D                      BNE    MERRTN
     665/    FAA4 : 8D 6C               MEM10  BSR    PCRLF    ; PR CR/LF
     666/    FAA6 : DF D7               MEM12  STX    PNTR     ; SAVE NEW PNTR ADR
     667/    FAA8 : =$FAA8               MEMSL  EQU    *        ; FOUND / AS INSTR
     668/    FAA8 : CE 00 D7                   LDX    #PNTR    ; X PNT TO PR OBJECT
     669/    FAAB : 8D 2B                      BSR    OUT4HS   ; ADR,SP
     670/    FAAD : DE D7                      LDX    PNTR     ; RESET X TO PNTR
     671/    FAAF : 20 B8                      BRA    MEM02
     672/    FAB1 :                     ;*
     673/    FAB1 : 86 FF               MERRTN LDAA   #$FF     ; SET CC NEG FOR RTN
     674/    FAB3 : 39                  RETRN  RTS
     675/    FAB4 :                     
     676/    FAB4 :                     ;*********** OFFSET *********
     677/    FAB4 :                     ;*O <ADR> CALCULATES OFFSET FROM LAST MEMORY REF
     678/    FAB4 :                     ;*WHICH SHOULD BE LOC OF REL ADR OF BR INSTR, TO
     679/    FAB4 :                     ;*THE <ADR> SPECIFIED
     680/    FAB4 :                     ;* IF A=0, B<80 DISTANCE CHK
     681/    FAB4 :                     ;* IF A=FF, B>7F
     682/    FAB4 :                     ;*
     683/    FAB4 : BD FE 57            OFFSET JSR    RD2ADR   ; READ 2 ADDR
     684/    FAB7 : DC D9                      LDD    TEMPA
     685/    FAB9 : 83 00 01                   SUBD   #1
     686/    FABC : 93 D7                      SUBD   PNTR     ; OFFSET=TO-(FROM+1)
     687/    FABE : C1 7F                      CMPB   #$7F     ; CHK IF VALID DISTANCE
     688/    FAC0 : 22 05                      BHI    OFF4
     689/    FAC2 : 4D                         TSTA            ; POSITIVE DISTANCE?
     690/    FAC3 : 27 06                      BEQ    OFFG
     691/    FAC5 : 20 EA                      BRA    MERRTN
     692/    FAC7 : 81 FF               OFF4   CMPA   #$FF     ; NEG DISTANCE
     693/    FAC9 : 26 E6                      BNE    MERRTN
     694/    FACB : D7 DB               OFFG   STAB   TEMP     ; PR OFFSET
     695/    FACD : 8D 43                      BSR    PCRLF    ; PR LF AFTER USER CR
     696/    FACF : CE 00 DB                   LDX    #TEMP
     697/    FAD2 : 8D 07                      BSR    OUT2HS
     698/    FAD4 : 8D 3C                      BSR    PCRLF
     699/    FAD6 : 20 D0                      BRA    MEMSL    ; GO TO / ROUTINE
     700/    FAD8 :                     
     701/    FAD8 :                     ;**************** OUT4HS ***************
     702/    FAD8 :                     ;* PRINT 2 BYTES AND SPACE
     703/    FAD8 :                     ;* REG X - ADR OF 1ST BYTE
     704/    FAD8 :                     ;* X WILL BE INCREMENTED BY 1
     705/    FAD8 : 8D 07               OUT4HS BSR    OUT2H
     706/    FADA : 08                         INX             ; GET NEXT BYTE
     707/    FADB :                     ;* FALL THRU OUT2HS
     708/    FADB :                     
     709/    FADB :                     ;*************** OUT2HS ****************
     710/    FADB :                     ;* PRINT 1 BYTE AND SPACE
     711/    FADB :                     ;* REG X - ADDR OF BYTE
     712/    FADB : 8D 04               OUT2HS BSR     OUT2H   ; 1 BYTE
     713/    FADD : 86 20               SPACE  LDAA    #$20    ; PR SPACE
     714/    FADF : 20 3A                      BRA     XOUTCH  ; PR 1 CHAR & RTN
     715/    FAE1 :                     
     716/    FAE1 :                     ;*************** OUT2H ***************
     717/    FAE1 :                     ;* PRINT 1 BYTE
     718/    FAE1 :                     ;* REG X - ADR OF BYTE
     719/    FAE1 : A6 00               OUT2H  LDAA   0,X
     720/    FAE3 : 36                         PSHA            ; READ BYTE ONLY ONCE
 AS V1.42 Beta [Bld 239] - Source File LILBUG.ASM - Page 13 - 04/03/2023 07:40:55 PM


     721/    FAE4 : 8D 03                      BSR    OUTHL
     722/    FAE6 : 32                         PULA
     723/    FAE7 : 20 04                      BRA    OUTHR    ; RIGHT
     724/    FAE9 :                     
     725/    FAE9 :                     ;************** OUTHL ****************
     726/    FAE9 :                     ;* CONVERT LEFT 4 BITS OF BYTE TO DISPLAY
     727/    FAE9 : 44                  OUTHL  LSRA            ; OUTPUT LEFT 4 BINARY BITS
     728/    FAEA : 44                         LSRA
     729/    FAEB : 44                         LSRA
     730/    FAEC : 44                         LSRA
     731/    FAED :                     
     732/    FAED :                     ;************** OUTHR ****************
     733/    FAED :                     ;* CONVERT RIGHT 4 BITS OF BYTE AND PRINT
     734/    FAED : 84 0F               OUTHR  ANDA   #$F      ; OUTPUT RIGHT 4 BITS
     735/    FAEF : 8B 90                      ADDA   #$90     ; CONVERT TO DISPLAY
     736/    FAF1 : 19                         DAA
     737/    FAF2 : 89 40                      ADCA   #$40
     738/    FAF4 : 19                         DAA
     739/    FAF5 : 20 24                      BRA    XOUTCH   ; PR 1 CHAR & RTN
     740/    FAF7 :                     
     741/    FAF7 :                     ;************** STRCHK ****************
     742/    FAF7 :                     ;* STORE B AT 0,X & VERIFY STORE *****
     743/    FAF7 :                     ;* DETECTS NON-EXISTENT MEMORY, ROM, PROTECTED RAM
     744/    FAF7 : E7 00               STRCHK STAB   0,X      ; STORE B
     745/    FAF9 : E1 00                      CMPB   0,X      ; VERIFY MEMORY CHG
     746/    FAFB : 27 B6                      BEQ    RETRN    ; OK
     747/    FAFD : CE FF 9B                   LDX    #NOCHG   ; MSG
     748/    FB00 : 8D 0C                      BSR    PDATA
     749/    FB02 : 20 AD                      BRA    MERRTN   ; SET CC NEG
     750/    FB04 :                     ;*
     751/    FB04 :                     ;************** PDATA1 ****************
     752/    FB04 :                     ;* PRINT DATA STRING
     753/    FB04 :                     ;* REG X POINTS TO PRINT ARRAY
     754/    FB04 :                     ;* X WILL BE INCREMENTED
     755/    FB04 : 8D 15               PDATA2 BSR    XOUTCH   ; CALL OUTPUT ROUTINE
     756/    FB06 : 08                         INX             ; X=ADR OF OUTPUT ARRAT
     757/    FB07 : A6 00               PDATA1 LDAA   0,X      ; GET CHAR
     758/    FB09 : 81 04                      CMPA   #4       ; EOT?
     759/    FB0B : 26 F7                      BNE    PDATA2
     760/    FB0D : 39                         RTS
     761/    FB0E :                     
     762/    FB0E :                     ;**************** PDATA ***************
     763/    FB0E :                     ;* CR/LF THEN PRINT DATA STRING
     764/    FB0E : 8D 02               PDATA  BSR    PCRLF    ; CR/LF, DATA STRING
     765/    FB10 : 20 F5                      BRA    PDATA1
     766/    FB12 :                     
     767/    FB12 :                     ;*************** PCRLF ***************
     768/    FB12 :                     ;* OUTPUT CR/LF
     769/    FB12 :                     ;* SAVE, RESTORE REG X
     770/    FB12 : 86 0A               PCRLF  LDAA   #$A      ; OUTPUT LF
     771/    FB14 : 8D 05                      BSR    XOUTCH   ; PR & RTN
     772/    FB16 :                     
     773/    FB16 : 86 0D               PCR    LDAA   #$D      ; DO CR
     774/    FB18 : 8D 01                      BSR    XOUTCH   ; PR & RTN
     775/    FB1A : 4F                         CLRA
     776/    FB1B : 7E F8 09            XOUTCH JMP    OUTCH    ; OUTPUT & RTN
     777/    FB1E :                     
     778/    FB1E :                     ;*********** PRINT REGISTERS **********
     779/    FB1E :                     ;* PR REGISTERS ACRPSS PAGE
     780/    FB1E :                     ;* PR 2ND LINE REG, READING INPUT
 AS V1.42 Beta [Bld 239] - Source File LILBUG.ASM - Page 14 - 04/03/2023 07:40:55 PM


     781/    FB1E :                     ;*     SPACE - PR CONVERTS REG, GO TO NEXT REG
     782/    FB1E :                     ;*     HEX,SP - MODIFY REG, GO TO NEXT REG
     783/    FB1E :                     ;*     HEX,CR - MODIFY REG, RTN
     784/    FB1E :                     ;*     CR OR OTHER COMBINATION - NO CHG, RTN
     785/    FB1E : 8D 66               REGSTR BSR    PREGS1
     786/    FB20 : 8D F0                      BSR    PCRLF    ; CR/LF AFTER REG PRINT
     787/    FB22 : CE 00 DD            REGS1  LDX    #SAVSTK  ; PSEUDO REGS
     788/    FB25 : 5F                         CLRB            ; INIT OFFSET
     789/    FB26 : 3C                  REGS2  PSHX            ; SAVE REG PNTR
     790/    FB27 : CE FF B5                   LDX    #ARRAY   ; CONTAINS REG NAMES
     791/    FB2A : 3A                         ABX             ; ADD OFFSET
     792/    FB2B : A6 00                      LDAA   0,X      ; GET CURRENT REG
     793/    FB2D : 8D 62                      BSR    OUTDA    ; PR REG NAME, DASH
     794/    FB2F : A6 01                      LDAA   1,X      ; #BYTES FLAG
     795/    FB31 : 38                         PULX            ; REG PNTR
     796/    FB32 : 7D 00 D0                   TST    CT       ; PRINT OR MOD?
     797/    FB35 : 27 0B                      BEQ    REGS3    ; MODIFY
     798/    FB37 : 4D                         TSTA            ; CHK # BYTES
     799/    FB38 : 27 03                      BEQ    REGS4
     800/    FB3A : 8D A5                      BSR    OUT2H    ; PR 2 HEX DIGITS
     801/    FB3C : 08                         INX
     802/    FB3D : 8D 9C               REGS4  BSR    OUT2HS   ; PR 2 HEX + SP_
     803/    FB3F : 08                         INX
     804/    FB40 : 20 04                      BRA    REGS6
     805/    FB42 : 37                  REGS3  PSHB            ; SAVE OFFSET
     806/    FB43 : 8D 08                      BSR    INDAT    ; GO READ INPUT
     807/    FB45 : 33                         PULB            ; RETRIEVE OFFSET
     808/    FB46 : CB 02               REGS6  ADDB   #2       ; UPDATE
     809/    FB48 : C1 0C                      CMPB   #12      ; ALL REG CHKED
     810/    FB4A : 26 DA                      BNE    REGS2    ; NO - LOOP
     811/    FB4C : 39                         RTS
     812/    FB4D :                     
     813/    FB4D :                     ;*************** INDAT ***************
     814/    FB4D :                     ;* INPUT FOR REG MODIFICATION
     815/    FB4D : 36                  INDAT  PSHA            ; SAVE LEN FLG
     816/    FB4E : 3C                         PSHX            ; REG PNTR ADR
     817/    FB4F : BD FA 0D                   JSR    INPUT
     818/    FB52 : 38                         PULX            ; RESTORE
     819/    FB53 : 33                         PULB
     820/    FB54 : 2B 1B                      BMI    PRERR    ; ABORT
     821/    FB56 : 27 1D                      BEQ    INDAT2   ; NOT HEX
     822/    FB58 : BD F9 EB                   JSR    TERM     ; ACCRPT SP , CR
     823/    FB5B : 26 14                      BNE    PRERR    ; RTN TO MAIN
     824/    FB5D : 5D                         TSTB            ; CHK LENGTH FLG
     825/    FB5E : 27 09                      BEQ    INDAT0
     826/    FB60 : 36                         PSHA            ; SAVE LAST CHAR READ
     827/    FB61 : DC D9                      LDD    TEMPA    ; GET 2 BYTE READ IN
     828/    FB63 : ED 00                      STD    0,X
     829/    FB65 : 32                         PULA
     830/    FB66 : 08                         INX             ; INCR REG PNTR
     831/    FB67 : 20 04                      BRA    INDAT5
     832/    FB69 : D6 DA               INDAT0 LDAB   TEMPA+1  ; 1 BYTE CHANGE
     833/    FB6B : E7 00                      STAB   0,X
     834/    FB6D : 81 0D               INDAT5 CMPA   #$D      ; CR - RTN
     835/    FB6F : 26 13                      BNE    INDAT1
     836/    FB71 : 38                  PRERR  PULX            ; POP RTN ADR
     837/    FB72 : 33                         PULB            ; REMOVE FLAG FROM STK
     838/    FB73 : 4F                         CLRA            ; NO BELL ON RETURN
     839/    FB74 : 39                         RTS             ; RTN TO MAIN
     840/    FB75 : 81 20               INDAT2 CMPA   #$20     ; NO HEX, SPACE
 AS V1.42 Beta [Bld 239] - Source File LILBUG.ASM - Page 15 - 04/03/2023 07:40:55 PM


     841/    FB77 : 26 F8                      BNE    PRERR    ; RTN TO MAIN
     842/    FB79 : 5D                         TSTB            ; 2 OR 4 CHAR
     843/    FB7A : 26 05                      BNE    INDAT4
     844/    FB7C : BD FA DB                   JSR    OUT2HS   ; PR 2 CHAR,SPACE
     845/    FB7F : 20 03                      BRA    INDAT1
     846/    FB81 : BD FA D8            INDAT4 JSR    OUT4HS   ; PR 4 CHAR, SPACE
     847/    FB84 : 08                  INDAT1 INX             ; ADJUST REG PNTR
     848/    FB85 : 39                         RTS
     849/    FB86 :                     
     850/    FB86 :                     ;**************** PREGS ***************
     851/    FB86 :                     ;* PRINT REGS - P,X,A,B,C,S
     852/    FB86 : 8D 8A               PREGS1 BSR    PCRLF
     853/    FB88 : 7C 00 D0            PREGS  INC    CT       ; SET FLAG-PRT REG
     854/    FB8B : 8D 95                      BSR    REGS1    ; GO PRINT
     855/    FB8D : 7F 00 D0                   CLR    CT       ; RESET FLAG
     856/    FB90 : 39                         RTS
     857/    FB91 :                     
     858/    FB91 :                     ;*************** OUTDA ***************
     859/    FB91 :                     ;* PRINT REG A, -
     860/    FB91 : 8D 02               OUTDA  BSR    ZOUTCH   ; OUTPUT REG A
     861/    FB93 : 86 2D                      LDAA   #'-'     ; DASH
     862/    FB95 : 7E F8 09            ZOUTCH JMP    OUTCH
     863/    FB98 :                     
     864/    FB98 :                     ;********** BRKPNT **********
     865/    FB98 :                     ;* COME HERE AFTER RECOGNIZE B<DELIM>
     866/    FB98 :                     ;* B    DISPLAY ALL
     867/    FB98 :                     ;* B -  REMOVE ALL
     868/    FB98 :                     ;* B <ADR> INSERT BRKPNT
     869/    FB98 :                     ;* B -<ADR> REMOVE BRKPNT
     870/    FB98 : 81 0D               BRKPNT CMPA   #$D      ; CR?
     871/    FB9A : 27 2D                      BEQ    PRBRK    ; PRINT
     872/    FB9C : 81 2D                      CMPA   #'-'     ; DELETE?
     873/    FB9E : 27 4C                      BEQ    DELBRK
     874/    FBA0 : BD F9 FA                   JSR    VALINP
     875/    FBA3 : 2B 44                      BMI    GOX2     ; ABORT?
     876/    FBA5 : 26 06                      BNE    BP02     ; HEX?
     877/    FBA7 : 81 2D                      CMPA   #'-'     ; DELETE
     878/    FBA9 : 27 41                      BEQ    DELBRK
     879/    FBAB : 20 3C                      BRA    GOX2     ; ERR IF NOT DEL
     880/    FBAD : 81 0D               BP02   CMPA   #$D      ; CR
     881/    FBAF : 26 38                      BNE    BERRTN   ; ERROR RTN
     882/    FBB1 : 8D 26                      BSR    BRKTAB   ; IN TABL
     883/    FBB3 : 27 14                      BEQ    PRBRK    ; YES - OK RTN
     884/    FBB5 : CE 00 E6                   LDX    #BKADR
     885/    FBB8 : EC 00               BP04   LDD    0,X
     886/    FBBA : 27 09                      BEQ    BP06     ; AVAIL SP?
     887/    FBBC : 08                         INX             ; CHK NEXT POSN
     888/    FBBD : 08                         INX
     889/    FBBE : 8C 00 EE                   CPX    #OPCODE  ; END TABL?
     890/    FBC1 : 26 F5                      BNE    BP04
     891/    FBC3 : 20 24                      BRA    BERRTN   ; NO AVAIL SP
     892/    FBC5 : DC D9               BP06   LDD    TEMPA    ; GET ADR
     893/    FBC7 : ED 00                      STD    0,X      ; STORE IN TABLE
     894/    FBC9 :                     ;* FALL THRU AND PR BRKPNTS
     895/    FBC9 :                     ;* PRINT BREAKPOINTS
     896/    FBC9 : BD FB 12            PRBRK  JSR    PCRLF
     897/    FBCC : CE 00 E6                   LDX    #BKADR
     898/    FBCF : C6 04                      LDAB   #4
     899/    FBD1 : BD FA D8            PRBK2  JSR    OUT4HS
     900/    FBD4 : 08                         INX             ; INCR PNTR TO BRKPNTS
 AS V1.42 Beta [Bld 239] - Source File LILBUG.ASM - Page 16 - 04/03/2023 07:40:55 PM


     901/    FBD5 : 5A                         DECB
     902/    FBD6 : 26 F9                      BNE    PRBK2
     903/    FBD8 : 39                         RTS
     904/    FBD9 :                     
     905/    FBD9 :                     ;* SEARCH BREAKPOINT TABLE
     906/    FBD9 :                     ;* RETURN -1 IF BRKPNT NOT IN TABL
     907/    FBD9 :                     ;* OTHERWISE REG X POINT TO BRKPNT IN TABL
     908/    FBD9 : CE 00 E6            BRKTAB LDX    #BKADR
     909/    FBDC : DC D9               TAB1   LDD    TEMPA    ; GET PC
     910/    FBDE : A3 00                      SUBD   0,X
     911/    FBE0 : 27 09                      BEQ    BRTN
     912/    FBE2 : 08                         INX
     913/    FBE3 : 08                         INX
     914/    FBE4 : 8C 00 EE                   CPX    #OPCODE  ; COMPARE TO END TABLE
     915/    FBE7 : 26 F3                      BNE    TAB1
     916/    FBE9 : =$FBE9               GOX2   EQU    *        ; ERROR RETURN ENTRY FROM G
     917/    FBE9 : 86 FF               BERRTN LDAA   #$FF
     918/    FBEB : 39                  BRTN   RTS
     919/    FBEC :                     
     920/    FBEC :                     ;* DELETE BRKPNT
     921/    FBEC : BD F9 FA            DELBRK JSR    VALINP
     922/    FBEF : 2B F8                      BMI    BERRTN   ; ABORT OR ERR?
     923/    FBF1 : 81 0D                      CMPA   #$D      ; CR?
     924/    FBF3 : 26 F4                      BNE    BERRTN
     925/    FBF5 : 5D                         TSTB            ; HEX?
     926/    FBF6 : 26 0D                      BNE    DBRK6    ; JMP IF SO
     927/    FBF8 : CE 00 E5                   LDX    #BKADR-1
     928/    FBFB : C6 0C                      LDAB   #12      ; 0 BRKPNT TABLE
     929/    FBFD : 08                  DBRK2  INX
     930/    FBFE : 6F 00                      CLR    0,X
     931/    FC00 : 5A                         DECB
     932/    FC01 : 26 FA                      BNE    DBRK2
     933/    FC03 : 20 C4                      BRA    PRBRK
     934/    FC05 :                     ;* DELETE 1 BRKPNT
     935/    FC05 : 8D D2               DBRK6  BSR    BRKTAB
     936/    FC07 : 26 E0                      BNE    BERRTN
     937/    FC09 : ED 00                      STD    0,X      ; D=0 FROM BRKTAB
     938/    FC0B : 6F 08                      CLR    8,X      ; CLR OF CODE
     939/    FC0D : 20 BA                      BRA    PRBRK
     940/    FC0F :                     
     941/    FC0F :                     ;********** CALL ***********
     942/    FC0F :                     ;* CALL USER ROUTUNE AS SUBR
     943/    FC0F :                     ;* USER RTS RETURNS TO MONITOR
     944/    FC0F :                     ;* STK PNTR NOT GOOD ON RETURN
     945/    FC0F :                     ;* C <ADR> (CR) OR C (CR)
     946/    FC0F : 97 F7               CALL   STAA   CALLF    ; SET FLAG 3 0
     947/    FC11 :                     
     948/    FC11 :                     ;*********** G ***********
     949/    FC11 :                     ;* GO EXECUTE USER CODE
     950/    FC11 :                     ;* G(CR) OR G <ADR>
     951/    FC11 : 81 0D               GOXQT  CMPA   #$D      ; CR
     952/    FC13 : 27 0E                      BEQ    GOX6     ; XQT FROM CURRENT PC
     953/    FC15 : BD F9 FA                   JSR    VALINP
     954/    FC18 : 2F CF                      BLE    GOX2
     955/    FC1A : 81 0D                      CMPA   #$D      ; CR?
     956/    FC1C : 26 CB                      BNE    GOX2     ; ERR
     957/    FC1E : 7F 00 F5                   CLR    EXONE    ; SEE BRKPNT,IF ANY
     958/    FC21 : DF DD                      STX    SAVSTK   ; SET USER PX
     959/    FC23 : BD FB 12            GOX6   JSR    PCRLF
     960/    FC26 : 96 F7                      LDAA   CALLF    ; CALL CMD?
 AS V1.42 Beta [Bld 239] - Source File LILBUG.ASM - Page 17 - 04/03/2023 07:40:55 PM


     961/    FC28 : 27 0E                      BEQ    GOX7     ; NO
     962/    FC2A : 7F 00 F7                   CLR    CALLF
     963/    FC2D : DE E4                      LDX    SPSAVE   ; GET USER STX
     964/    FC2F : CC FC 58                   LDD    #CRTS    ; RTN TO MONITOR ADR
     965/    FC32 : 09                         DEX
     966/    FC33 : ED 00                      STD    0,X      ; STOR ON USER STK
     967/    FC35 : 09                         DEX             ; ADJUST USER STK
     968/    FC36 : DF E4                      STX    SPSAVE   ; RESAVE STK
     969/    FC38 :                     ;* NOW GO XQT USER SUBR
     970/    FC38 : 96 F5               GOX7   LDAA   EXONE    ; STOPPED ON BRKPNT
     971/    FC3A : 26 03                      BNE    GOX8
     972/    FC3C : BD FD 36                   JSR    SETB
     973/    FC3F : 20 15               GOX8   BRA    BARMS
     974/    FC41 :                     
     975/    FC41 :                     ;**********   (PERIOD) **********
     976/    FC41 :                     ;* TRACE 1 INSTRUCTION
     977/    FC41 : CE 00 01            NEXT   LDX    #1
     978/    FC44 : 20 09                      BRA    TRACE2
     979/    FC46 :                     
     980/    FC46 :                     ;********** T **********
     981/    FC46 :                     ;* T <HEX> - TRACE <HEX> INSTTR
     982/    FC46 : 81 0D               TRACE  CMPA   #$D      ; T(CR) ? - TRACE 1
     983/    FC48 : 27 F7                      BEQ    NEXT
     984/    FC4A : BD FA 0D                   JSR    INPUT    ; GET <HEX>
     985/    FC4D : 2F 9A                      BLE    GOX2     ; RTN IF ABORT OR NOT HEX
     986/    FC4F : DF F3               TRACE2 STX    NTRACE   ; STORE <HEX>
     987/    FC51 : 27 96                      BEQ    GOX2     ; RTN IF TRACE = 0
     988/    FC53 : 7C 00 F5                   INC    EXONE    ; XQT 1 INSTR
     989/    FC56 : 20 62               BARMS  BRA    ARMSTK
     990/    FC58 :                     
     991/    FC58 :                     ;********** CALL SUBR **********
     992/    FC58 :                     ;* ENTRY AFTER C COMMAND, AFTER XQT USER RTS
     993/    FC58 :                     ;* SAVE USER REGISTERS
     994/    FC58 :                     ;* PRINT REGISTERS
     995/    FC58 :                     ;* RETURN TO ROUTINE CALLING C COMMAND ROUTINE
     996/    FC58 : 36                  CRTS   PSHA            ; SAVE TO GET CC
     997/    FC59 : 07                         TPA
     998/    FC5A : 97 E3                      STAA   SAVSTK+6 ; CC
     999/    FC5C : 32                         PULA
    1000/    FC5D : 9F E4                      STS    SPSAVE   ; STK PNTR
    1001/    FC5F : 8E 00 CF                   LDS    #STACK
    1002/    FC62 : DD E1                      STD    SAVSTK+4 ; A,B
    1003/    FC64 : DF DF                      STX    SAVSTK+2 ; X
    1004/    FC66 : CE FC 58                   LDX    #CRTS    ; PC PNT TO MONITOR
    1005/    FC69 : DF DD                      STX    SAVSTK
    1006/    FC6B : BD FD 15                   JSR    RBRK     ; REMOVE BRKPNTS
    1007/    FC6E : 7E FD 7A                   JMP    ENDCAL   ; GO PR REGS, 0 EXONE
    1008/    FC71 :                     
    1009/    FC71 :                     ;* SETCLK - USED BY ON-CHIP CLOCK
    1010/    FC71 :                     ;* FOR HARDWARE TRACE
    1011/    FC71 :                     ;* SET TIMER TO COMPARE AFTER 1 CYCLE OF USER INSTR
    1012/    FC71 : C6 18               SETCLK LDAB   #$18     ; SET #CYCLES
    1013/    FC73 : DE 09                      LDX    CLOCK    ; GET CLOCK TIME
    1014/    FC75 : 3A                         ABX             ; ADD # CYCLES
    1015/    FC76 : DF 0B                      STX    OCREG    ; STORE IN COMPARE REG
    1016/    FC78 : 39                         RTS
    1017/    FC79 :                     
    1018/    FC79 :                     ;********** NMI ENTRY **********
    1019/    FC79 :                     ;* ENTRY FROM XQT 1 INSTR - TRACE OR XQT OVER BRKPNT
    1020/    FC79 :                     ;* MOVE REGS FROM USER STK TO MONITOR STORAGE
 AS V1.42 Beta [Bld 239] - Source File LILBUG.ASM - Page 18 - 04/03/2023 07:40:55 PM


    1021/    FC79 :                     ;* REPLACE BRKPNTS WITH USER CODE
    1022/    FC79 :                     ;* IF NOT TRACING, REPLACE CODE WITH BRKPNTS (3F)
    1023/    FC79 :                     ;* IF TRACING, PRINT REGISTERS
    1024/    FC79 :                     ;*             EXECUTE NEXT USER INSTR
    1025/    FC79 :                     ;* ENTRY FOR ONCHIP CLOCK TRACE
    1026/    FC79 : 7C 00 08            C.NMI  INC    TCSR     ; BRING LEVEL HIGH
    1027/    FC7C : 8D F3                      BSR    SETCLK   ; NO NMI, BUT LEVEL CHG
    1028/    FC7E :                     
    1029/    FC7E :                     ;* ENTRY FOR PTM HARDWARE TRACE
    1030/    FC7E : 30                  M.NMI  TSX             ; TRANSFER STK PTR
    1031/    FC7F : 8E 00 CF                   LDS    #STACK
    1032/    FC82 : 8D 79                      BSR    MOVSTK   ; SAVE USER REGS
    1033/    FC84 : BD FD 15                   JSR    RBRK     ; REMOVE BRKPNT
    1034/    FC87 : DE F3                      LDX    NTRACE   ; TRACE
    1035/    FC89 : 26 0A                      BNE    NMI01
    1036/    FC8B : 7F 00 F5                   CLR    EXONE
    1037/    FC8E : BD FD 36                   JSR    SETB
    1038/    FC91 : 2B 24                      BMI    NMI03
    1039/    FC93 : 20 25                      BRA    ARMSTK
    1040/    FC95 : 09                  NMI01  DEX
    1041/    FC96 : DF F3               NMI015 STX    NTRACE
    1042/    FC98 : 26 03                      BNE    NMI02
    1043/    FC9A : 7F 00 F5                   CLR    EXONE
    1044/    FC9D :                     ;* PRINT TRACE LINE:
    1045/    FC9D :                     ;* OP-XX P-XXXX X-XXXX A-XX B-XX C-XX S-XXXX
    1046/    FC9D :                     ;* CHECK IF USER HIT CONTROL X TO TERMINATE TRACE
    1047/    FC9D : CE 00 00            NMI02  LDX    #0       ; CLR TRACE & EXONE IF TERMINATE
    1048/    FCA0 : BD FD D7                   JSR    CHKABT
    1049/    FCA3 : 27 F1                      BEQ    NMI015   ; TERMINT IF = CNTL X
    1050/    FCA5 : CE FF B1                   LDX    #PRTOP   ; GET ADR OF OP-
    1051/    FCA8 : BD FB 0E                   JSR    PDATA
    1052/    FCAB : DE D9                      LDX    TEMPA    ; GET OLD PC
    1053/    FCAD : BD FA DB                   JSR    OUT2HS   ; PR OPCODE
    1054/    FCB0 : BD FB 88                   JSR    PREGS    ; PR TRACE LINE
    1055/    FCB3 : 96 F5                      LDAA   EXONE
    1056/    FCB5 : 26 03                      BNE    ARMSTK
    1057/    FCB7 : 7E F9 52            NMI03  JMP    MAIN
    1058/    FCBA :                     ;* STACK USER REGISTERS
    1059/    FCBA :                     ;* MOVE FROM MONITOR STORAGE TO USER STACK
    1060/    FCBA :                     ;* IF TRACE - SET HARDWARE
    1061/    FCBA : 9E E4               ARMSTK LDS    SPSAVE   ; SET STK FOR RTI
    1062/    FCBC : DE DD                      LDX    SAVSTK   ; PC
    1063/    FCBE : 3C                         PSHX
    1064/    FCBF : DE DF                      LDX    SAVSTK+2 ; X
    1065/    FCC1 : 3C                         PSHX
    1066/    FCC2 : DC E1                      LDD    SAVSTK+4 ; GET A,B
    1067/    FCC4 : 36                         PSHA            ; MOVE TO STK
    1068/    FCC5 : 37                         PSHB
    1069/    FCC6 : 96 E3                      LDAA   SAVSTK+6 ; GET CC
    1070/    FCC8 : 36                         PSHA
    1071/    FCC9 : 96 F5                      LDAA   EXONE
    1072/    FCCB : 27 1C                      BEQ    ARMS04
    1073/    FCCD : DE DD                      LDX    SAVSTK   ; SAVE PC PNTR FOR NXT TRACE PRT
    1074/    FCCF : DF D9                      STX    TEMPA
    1075/    FCD1 :                     ;* CHECK IF USE PTM OR ON-CHIP CLOCK
    1076/    FCD1 : 8D 17                      BSR    IFPTM
    1077/    FCD3 : 27 0D                      BEQ    SETPTM   ; GO USE PTM
    1078/    FCD5 :                     ;* IF USER ISSUE TRACE COMMAND AND
    1079/    FCD5 :                     ;* NOT USING PTM - ASSUME ON-CHIP
    1080/    FCD5 : 86 02                      LDAA   #2       ; SET DDR FOR OUTPUT
 AS V1.42 Beta [Bld 239] - Source File LILBUG.ASM - Page 19 - 04/03/2023 07:40:55 PM


    1081/    FCD7 : 97 01                      STAA   P2DDR    ; PORT 2
    1082/    FCD9 : D6 08                      LDAB   TCSR     ; SET UP FOR ON-CHIP CLOCK
    1083/    FCDB : C4 FE                      ANDB   #$FE     ; CLEAR OLVL BIT
    1084/    FCDD : D7 08                      STAB   TCSR
    1085/    FCDF : 8D 90                      BSR    SETCLK   ; SET CMPR REG, WAIT FOR CMPR
    1086/    FCE1 : =$FCE1               DUMMY  EQU    *        ; INTERRUPT VECTORS USE THIS
    1087/    FCE1 : 3B                         RTI
    1088/    FCE2 :                     
    1089/    FCE2 :                     ;* SET HARDWARE FOR PTM
    1090/    FCE2 :                     ;* INITIALIZE COUNTER
    1091/    FCE2 : CC 05 01            SETPTM LDD    #$0501   ; M=5,L=1 TURN ON TRACE
    1092/    FCE5 : DE F8                      LDX    PTM      ; GET ADR OF PTM
    1093/    FCE7 : ED 02                      STD    2,X      ; STORE AT PTM ADR +2
    1094/    FCE9 : 3B                  ARMS04 RTI
    1095/    FCEA :                     
    1096/    FCEA :                     ;* CHECK NMI VECTOR
    1097/    FCEA :                     ;* DETERMINE IF USE ON-CHIP CLOCK OR PTM
    1098/    FCEA :                     ;*    FOR HARDWARE TRACE
    1099/    FCEA : CE FF F0            IFPTM  LDX    #VECTR   ; GET ADR OF VECTORS
    1100/    FCED : 96 03                      LDAA   MODE     ; EXTERNA VECTRS?
    1101/    FCEF : 84 E0                      ANDA   #$E0     ; CHK 3 MSB
    1102/    FCF1 : 81 20                      CMPA   #$20     ; MODE 1?
    1103/    FCF3 : 27 02                      BEQ    IFPTM2
    1104/    FCF5 : DE FE                      LDX    VECPTR   ; GET VECTOR TABLE
    1105/    FCF7 : EE 0C               IFPTM2 LDX    $C,X     ; GET NMI ADDRESS
    1106/    FCF9 : 8C F8 00                   CPX    #EX.NMI  ; PTM ENTRY?
    1107/    FCFC : 39                         RTS             ; RETURN WITH CC SET
    1108/    FCFD :                     
    1109/    FCFD :                     ;*************** MOVSTR ***************
    1110/    FCFD :                     ;* MOVE USER REGS FROM USER STACK TO MONITOR STORAGE
    1111/    FCFD :                     ;* RESET USER STACK POINTER
    1112/    FCFD : A6 00               MOVSTK LDAA   0,X      ; MOVE C,B,A,X,PC
    1113/    FCFF : 97 E3                      STAA   SAVSTK+6 ; TO PC,X,A,B,C
    1114/    FD01 : EC 01                      LDD    1,X
    1115/    FD03 : 97 E2                      STAA   SAVSTK+5
    1116/    FD05 : D7 E1                      STAB   SAVSTK+4
    1117/    FD07 : EC 03                      LDD    3,X
    1118/    FD09 : DD DF                      STD    SAVSTK+2
    1119/    FD0B : EC 05                      LDD    5,X
    1120/    FD0D : DD DD                      STD    SAVSTK
    1121/    FD0F : C6 06                      LDAB   #6
    1122/    FD11 : 3A                         ABX
    1123/    FD12 : DF E4                      STX    SPSAVE
    1124/    FD14 : 39                         RTS
    1125/    FD15 :                     
    1126/    FD15 :                     ;*************** RBRK ***************
    1127/    FD15 :                     ;* REPLACE BRKPNTS (SWI) WITH USER CODE
    1128/    FD15 :                     ;* BKADR - TABLE OF 4 BRKPNT ADR
    1129/    FD15 :                     ;* OPCODE - TABLE OF OPCODES, CORRESPOND TO ADR
    1130/    FD15 : 96 F2               RBRK   LDAA   BRKFLG   ; IGNORE IF BRKPNTS NOT IN
    1131/    FD17 : 27 1C                      BEQ    RBRK6
    1132/    FD19 : CE 00 E6                   LDX    #BKADR   ; GET TABLE OF ADR
    1133/    FD1C : C6 08                      LDAB   #NUMBP*2 ; INDEX INTO OPCODE TABLE
    1134/    FD1E : 3C                  RBRK2  PSHX            ; SAVE TABLE ADR
    1135/    FD1F : 3C                         PSHX
    1136/    FD20 : 3A                         ABX
    1137/    FD21 : A6 00                      LDAA   0,X      ; GET OPCODE
    1138/    FD23 : 38                         PULX
    1139/    FD24 : EE 00                      LDX    0,X      ; GET USER BRKPNT ADR
    1140/    FD26 : 27 02                      BEQ    RBRK3    ; NO ADR
 AS V1.42 Beta [Bld 239] - Source File LILBUG.ASM - Page 20 - 04/03/2023 07:40:55 PM


    1141/    FD28 : A7 00                      STAA   0,X      ; RESTORE OPCODE
    1142/    FD2A : 38                  RBRK3  PULX            ; GET NXTT ADR FROM TABL
    1143/    FD2B : 08                         INX
    1144/    FD2C : 08                         INX
    1145/    FD2D : 5A                         DECB            ; ADJUST OPCODE INDEX
    1146/    FD2E : C1 04                      CMPB   #NUMBP   ; END TABLE?
    1147/    FD30 : 26 EC                      BNE    RBRK2
    1148/    FD32 : 7F 00 F2                   CLR    BRKFLG   ; CLR BRKPNT FLAG
    1149/    FD35 : 39                  RBRK6  RTS
    1150/    FD36 :                     
    1151/    FD36 :                     ;*************** SETB ***************
    1152/    FD36 :                     ;* REPLACE USER CODE WITH 3F AT BRKPNT ADDRESSES
    1153/    FD36 :                     ;* IGNORE IF BREAKPOINTS ALREADY IN
    1154/    FD36 : 96 F2               SETB   LDAA   BRKFLG   ; ALREADY IN?
    1155/    FD38 : 26 70                      BNE    SWERR    ; SET NEG RETURN
    1156/    FD3A : CE 00 E6                   LDX    #BKADR
    1157/    FD3D : C6 08                      LDAB   #NUMBP*2 ; SET INDEX INTO OPCODES
    1158/    FD3F : 3C                  SETB2  PSHX            ; SAVE ADR PNTR
    1159/    FD40 : EE 00                      LDX    0,X      ; GET USER BRKPNT ADR
    1160/    FD42 : 27 10                      BEQ    SETB4    ; SKIP IF NO ADR
    1161/    FD44 : A6 00                      LDAA   0,X      ; GET OPCODE
    1162/    FD46 : 37                         PSHB            ; SAVE OPCODE INDEX
    1163/    FD47 : C6 3F                      LDAB   #$3F     ; SET SWI
    1164/    FD49 : BD FA F7                   JSR    STRCHK   ; STORE & CHK CHG
    1165/    FD4C : 33                         PULB            ; INDEX
    1166/    FD4D : 38                         PULX            ; ADR TABLE PNTR
    1167/    FD4E : 2B 0E                      BMI    SETB6    ; 3F STORED GOOD?
    1168/    FD50 : 3C                         PSHX            ; RESAVE TABLE PNTR
    1169/    FD51 : 3A                         ABX             ; CALCULATE OP POS IN TABLE
    1170/    FD52 : A7 00                      STAA   0,X      ; SAVE OPCODE
    1171/    FD54 : 38                  SETB4  PULX            ; GET TABLE ADR
    1172/    FD55 : 08                         INX
    1173/    FD56 : 08                         INX             ; GET NXT ADT
    1174/    FD57 : 5A                         DECB            ; ADJUST OPCODE INDEX
    1175/    FD58 : C1 04                      CMPB   #NUMBP   ; END TABLE?
    1176/    FD5A : 26 E3                      BNE    SETB2    ; LOOP IF NOT
    1177/    FD5C : D7 F2                      STAB   BRKFLG   ; SET BRKPNT FLAG
    1178/    FD5E : 39                  SETB6  RTS
    1179/    FD5F :                     
    1180/    FD5F :                     
    1181/    FD5F :                     ;********** SWI ENTRY **********
    1182/    FD5F :                     ;* ENTER WITH BRKPOINT SETTING
    1183/    FD5F :                     ;* SAVE USER REGISTERS
    1184/    FD5F :                     ;* DECR PC TO POINT AT SWI
    1185/    FD5F :                     ;* REPLACE SWI'S WITH USER CODE
    1186/    FD5F :                     ;* PRINT REGISTERS
    1187/    FD5F :                     ;* GO TO MAIN CONTROL LOOP
    1188/    FD5F : 30                  M.SWI  TSX             ; GET USER STK
    1189/    FD60 : 8E 00 CF                   LDS    #STACK   ; SET TO INTERNAL STK
    1190/    FD63 : 8D 98                      BSR    MOVSTK   ; SAVE USER REGS
    1191/    FD65 : DE DD                      LDX    SAVSTK   ; DECR USER PC
    1192/    FD67 : 09                         DEX
    1193/    FD68 : DF DD                      STX    SAVSTK
    1194/    FD6A : DF D9                      STX    TEMPA    ; SAVE FOR BRKTAB CHK
    1195/    FD6C : 96 F2                      LDAA   BRKFLG   ; ERR IF NOT BRKPOINT
    1196/    FD6E : 27 0A                      BEQ    BKPERR
    1197/    FD70 : 8D A3                      BSR    RBRK     ; REMOVE BRKPNT FROM CODE
    1198/    FD72 : BD FB D9                   JSR    BRKTAB   ; BRKPNT IN TABLE?
    1199/    FD75 : 26 03                      BNE    BKPERR
    1200/    FD77 :                     ;* REG A = 0 IF BRKTAB FIND BRKPNT
 AS V1.42 Beta [Bld 239] - Source File LILBUG.ASM - Page 21 - 04/03/2023 07:40:55 PM


    1201/    FD77 : 4C                         INCA
    1202/    FD78 : 20 04                      BRA    SWI3
    1203/    FD7A :                     ;* ENTRY FROM CRTS - PR REGS, RTN TO MAIN
    1204/    FD7A : =$FD7A               ENDCAL EQU    *
    1205/    FD7A : 4F                  BKPERR CLRA
    1206/    FD7B : 5F                         CLRB
    1207/    FD7C : DD F3                      STD    NTRACE   ; RESET NUM INSTR TO TRACE
    1208/    FD7E : 97 F5               SWI3   STAA   EXONE    ; CLEAR XQT 1 INSTR
    1209/    FD80 : BD FB 86                   JSR    PREGS1
    1210/    FD83 : 7E F9 52                   JMP    MAIN     ; GO TO MAIN LOOP
    1211/    FD86 :                     
    1212/    FD86 :                     ;********** DISPLAY **********
    1213/    FD86 :                     ;* D   OR D <ADR>  OR D <ADR> <ADR>
    1214/    FD86 :                     ;* DISPLAY MEMORY - BLK OF MEMORY AROUND LAST
    1215/    FD86 :                     ;*   REFERENCED BYTE FROM MEM/EX
    1216/    FD86 :                     ;* DISPLAY 16 BYTES AROUND <ADR> SPECIFIED
    1217/    FD86 :                     ;* OR DISPLAY FROM <ADR> TO <ADR> MOD 16
    1218/    FD86 :                     ;* ASCII CHAR WILL BE PRINTED ON THE RIGHT
    1219/    FD86 :                     ;* MEM/EX PNTR WILL PNT TO LAST ADR REFERENCED
    1220/    FD86 :                     ;* AT END OF DISPLAY COMMAND
    1221/    FD86 :                     ;*
    1222/    FD86 : DE D7               DISPLY LDX    PNTR     ; SAVE MEMORY/EX PNTR
    1223/    FD88 : 3C                         PSHX
    1224/    FD89 : 81 0D                      CMPA   #$D      ; CR?
    1225/    FD8B : 27 0A                      BEQ    SHOW35   ; NO ARG
    1226/    FD8D : 8D 5A                      BSR    PVALIN
    1227/    FD8F : 2F 16                      BLE    SWERR2   ; ERR IF NOT HEX, OR ABORT
    1228/    FD91 : DF D7                      STX    PNTR
    1229/    FD93 : 81 0D                      CMPA   #$D      ; CR?
    1230/    FD95 : 26 16                      BNE    SHOW4
    1231/    FD97 : DC D7               SHOW35 LDD    PNTR     ; DEFINE BLK TO DMP
    1232/    FD99 : C4 F0                      ANDB   #$F0     ; MASK OUT LOW DIGIT
    1233/    FD9B : 83 00 10                   SUBD   #$10
    1234/    FD9E : DD D7                      STD    PNTR
    1235/    FDA0 : C3 00 20                   ADDD   #$20
    1236/    FDA3 : DD D9                      STD    TEMPA    ; TO ADR
    1237/    FDA5 : 20 1A                      BRA    SHOW8
    1238/    FDA7 : 38                  SWERR2 PULX            ; RESET MEM/EX PNTR
    1239/    FDA8 : DF D7                      STX    PNTR
    1240/    FDAA : 86 FF               SWERR  LDAA   #$FF
    1241/    FDAC : 39                         RTS
    1242/    FDAD : 8D 3A               SHOW4  BSR    PVALIN   ; READ HEX #
    1243/    FDAF : 2F F6                      BLE    SWERR2   ; JMP IF ERR
    1244/    FDB1 : DC D7                      LDD    PNTR     ; FROM ADR < TO ADR?
    1245/    FDB3 : C4 F0                      ANDB   #$F0     ; MASK OUT LOW ORDER DIGIT
    1246/    FDB5 : D7 D8                      STAB   PNTR+1
    1247/    FDB7 : 93 D9                      SUBD   TEMPA
    1248/    FDB9 : 22 EC                      BHI    SWERR2
    1249/    FDBB : 96 DA                      LDAA   TEMPA+1  ; MASL TO FULL LINE
    1250/    FDBD : 84 F0                      ANDA   #$F0
    1251/    FDBF : 97 DA                      STAA   TEMPA+1  ; CHANGES LAST REF ADR
    1252/    FDC1 :                     ;* TURN ON HIGH SPEED DEVICE
    1253/    FDC1 :                     ;* CALL HIGH SPEED DATA ROUTINE TO OUTPUT
    1254/    FDC1 :                     ;*    DATA FROM ADR IN PNTR TO ADR IN TEMPA
    1255/    FDC1 : C6 0C               SHOW8  LDAB   #HS.ON
    1256/    FDC3 : BD FE 54                   JSR    IO2
    1257/    FDC6 : CE 00 D7                   LDX    #BBLK+1  ; GET TRANSFER PACKET
    1258/    FDC9 : C6 0E                      LDAB   #HS.DTA
    1259/    FDCB : BD F8 DF                   JSR    IO
    1260/    FDCE : 38                         PULX            ; RETRIEVE MEM/EX PNTR
 AS V1.42 Beta [Bld 239] - Source File LILBUG.ASM - Page 22 - 04/03/2023 07:40:55 PM


    1261/    FDCF : DF D7                      STX    PNTR
    1262/    FDD1 : C6 10                      LDAB   #HS.OFF
    1263/    FDD3 : 8D 7F                      BSR    IO2
    1264/    FDD5 : 4F                         CLRA            ; CLEAR CC FOR RETURN
    1265/    FDD6 : 39                         RTS
    1266/    FDD7 :                     
    1267/    FDD7 :                     ;**************** CHKABT ***************
    1268/    FDD7 :                     ;* READ WITH NO WAIT
    1269/    FDD7 :                     ;* CHK FOR CONTROL X - ESCAPE FROM PRINT
    1270/    FDD7 :                     ;* CHK FOR CONTROL W = WAIT DURING T OR D PRINT
    1271/    FDD7 :                     ;*    ANY CHARACTER CONTINUES PRINT
    1272/    FDD7 :                     ;* ANY OTHER CHARACTER - READ & IGNORE
    1273/    FDD7 : 36                  CHKABT PSHA
    1274/    FDD8 : C6 02                      LDAB   #CI.DTA  ; READ A CHAR
    1275/    FDDA : 8D 78                      BSR    IO2
    1276/    FDDC : 84 7F                      ANDA   #$7F     ; CLEAR PARITY
    1277/    FDDE : 81 17                      CMPA   #CNTLW   ; CONTROL W?
    1278/    FDE0 : 26 03                      BNE    CHK2     ; IF SO WAIT FOR INPUT
    1279/    FDE2 : BD F8 06                   JSR    INCHNP   ; TO CONTINUE PRINT
    1280/    FDE5 : 81 18               CHK2   CMPA   #CNTLX   ; CONTROL X?
    1281/    FDE7 :                     ;* RETURN WITH CC SET
    1282/    FDE7 : 32                         PULA
    1283/    FDE8 : 39                  SHOW19 RTS
    1284/    FDE9 :                     
    1285/    FDE9 : 7E F9 FA            PVALIN JMP    VALINP   ; SAVE BYTES
    1286/    FDEC :                     
    1287/    FDEC :                     ;************** HSDTA ***************
    1288/    FDEC :                     ;* FROM ADR, TO ADR IN TRANSFER BLOCK
    1289/    FDEC :                     ;* ADR ARE DIVISIBLE BY 16
    1290/    FDEC :                     ;* ADR OF BLOCK WAS IN REG X
    1291/    FDEC :                     ;* X SAVED ON STK BY IO
    1292/    FDEC : 30                  HSDTA  TSX             ; GET TRANSFER PACKET
    1293/    FDED : EE 02                      LDX    2,X
    1294/    FDEF : EC 00                      LDD    0,X      ; GET FROM ADR
    1295/    FDF1 : DD D7                      STD    PNTR     ; SAVE FOR DUMP
    1296/    FDF3 : EC 02                      LDD    2,X      ; GET TO ADR
    1297/    FDF5 : DD D9                      STD    TEMPA
    1298/    FDF7 : BD FB 12            SHOW9  JSR    PCRLF    ; LINE FEED
    1299/    FDFA :                     ;* PRINT BLOCK HEADING
    1300/    FDFA : CE FF C1                   LDX    #SPACE6  ; PR LEADING BLANKS
    1301/    FDFD : BD FB 0E                   JSR    PDATA
    1302/    FE00 : 4F                         CLRA
    1303/    FE01 : 36                  PRTTL  PSHA
    1304/    FE02 : BD FA ED                   JSR    OUTHR    ; CONVERT TO DISPLAY
    1305/    FE05 : BD FA DD                   JSR    SPACE
    1306/    FE08 : BD FA DD                   JSR    SPACE    ; PR 2 SPACES
    1307/    FE0B : 32                         PULA            ; GET CNTR
    1308/    FE0C : 4C                         INCA
    1309/    FE0D : 81 10                      CMPA   #$10     ; PR 0-F
    1310/    FE0F : 26 F0                      BNE    PRTTL    ; FINISHED?
    1311/    FE11 :                     ;* CHECK IF USER WANT TO TERMINT DISPLAY CMD
    1312/    FE11 : 8D C4               SHOW10 BSR    CHKABT
    1313/    FE13 : 27 D3                      BEQ    SHOW19   ; RETURN IF CONTROL X
    1314/    FE15 : BD FB 12                   JSR    PCRLF
    1315/    FE18 : CE 00 D7                   LDX    #PNTR    ; GET ADD OF LINE
    1316/    FE1B : BD FA D8                   JSR    OUT4HS   ; PRINT ADR
    1317/    FE1E : DE D7                      LDX    PNTR     ; GET CONTENTS OF MEMORY
    1318/    FE20 : C6 10                      LDAB   #16      ; CNTR FOR LINE
    1319/    FE22 : BD FA DB            SHOW12 JSR    OUT2HS   ; PR DATA
    1320/    FE25 : 08                         INX             ; INCR ADR PNTR
 AS V1.42 Beta [Bld 239] - Source File LILBUG.ASM - Page 23 - 04/03/2023 07:40:55 PM


    1321/    FE26 : 5A                         DECB
    1322/    FE27 : 26 F9                      BNE    SHOW12   ; LOOP
    1323/    FE29 : BD FA DD                   JSR    SPACE    ; PRINT ASCII DUMP
    1324/    FE2C : C6 10                      LDAB   #16      ; NUM CHAR/LINE
    1325/    FE2E : DE D7                      LDX    PNTR
    1326/    FE30 : A6 00               SHOW14 LDAA   0,X
    1327/    FE32 : 84 7F                      ANDA   #$7F     ; CHK PRINTABLE
    1328/    FE34 : 81 20                      CMPA   #$20
    1329/    FE36 : 2D 04                      BLT    SHOW16   ; NON-CHAR
    1330/    FE38 : 81 61                      CMPA   #$61
    1331/    FE3A : 2D 02                      BLT    SHOW18
    1332/    FE3C : 86 2E               SHOW16 LDAA   #'.'     ; PR . FOR NON-CHAR
    1333/    FE3E : BD F8 09            SHOW18 JSR    OUTCH
    1334/    FE41 : 08                         INX
    1335/    FE42 : 5A                         DECB
    1336/    FE43 : 26 EB                      BNE    SHOW14   ; LOOP
    1337/    FE45 : DC D9                      LDD    TEMPA
    1338/    FE47 : 93 D7                      SUBD   PNTR
    1339/    FE49 : 27 9D                      BEQ    SHOW19   ; RETURN
    1340/    FE4B : DF D7                      STX    PNTR     ; SAVE FROM ADR
    1341/    FE4D : 7D 00 D8                   TST    PNTR+1
    1342/    FE50 : 26 BF                      BNE    SHOW10   ; END OF LINE
    1343/    FE52 : 20 A3                      BRA    SHOW9    ; END OF BLOCK
    1344/    FE54 :                     
    1345/    FE54 :                     ;* IO CALL - TO SAVE A FEW BYTES
    1346/    FE54 : 7E F8 DF            IO2    JMP    IO
    1347/    FE57 :                     
    1348/    FE57 :                     ;*************** RD2ADR ***************
    1349/    FE57 :                     ;* READ <DELIM> <ADR1> <ADR2>
    1350/    FE57 : 81 0D               RD2ADR CMPA   #$0D     ; CR?
    1351/    FE59 : 27 13                      BEQ    PNCHER
    1352/    FE5B : 8D 8C                      BSR    PVALIN   ; CALL INPUT ROUTINE
    1353/    FE5D : 2F 0F                      BLE    PNCHER   ; CHK IF NUMBER
    1354/    FE5F : DF D7                      STX    BBLK+1   ; SAVE 1ST ADR (PNTR)
    1355/    FE61 :                     ;* INPUT CHECKS FOR DELIMITER
    1356/    FE61 : 81 0D                      CMPA   #$D      ; CR?
    1357/    FE63 : 27 09                      BEQ    PNCHER   ; DO NOT ALLOW CR
    1358/    FE65 : BD FD E9            PNCH3  JSR    PVALIN   ; READ NEXT ADR
    1359/    FE68 : 2F 04                      BLE    PNCHER   ; VALID ADR?
    1360/    FE6A : 81 0D                      CMPA   #$D      ; REQUIRE CR AFER ADR
    1361/    FE6C : 27 03                      BEQ    PNCRTN
    1362/    FE6E : 86 FF               PNCHER LDAA   #$FF     ; ERR RTN
    1363/    FE70 : 38                         PULX            ; REMOVE SUBR CALL ADR
    1364/    FE71 : 39                  PNCRTN RTS
    1365/    FE72 :                     
    1366/    FE72 :                     ;*************** PUNCH ***************
    1367/    FE72 :                     ;* P <ADR1> <ADR2>
    1368/    FE72 :                     ;* PUNCH FROM <ADR1> TO <ADR2>
    1369/    FE72 :                     ;* ERRPR IF <ADR2> LT <ADR1>
    1370/    FE72 :                     ;* SET UP TRANSFER PACKET
    1371/    FE72 :                     ;* 1ST WRD - FCN FOR PUNCH = 0
    1372/    FE72 :                     ;* 2ND, 3RD WRDS = <ADR1>
    1373/    FE72 :                     ;* 4TH, 5TH WRDS = <ADR2>
    1374/    FE72 :                     ;* LDX W/ ADR OF TRANSFER PACKET
    1375/    FE72 :                     ;* JMP THRU IO VECTOR TO BSDTA
    1376/    FE72 : 7F 00 D6            PUNCH  CLR    BBLK     ; SET BULK STR FCN
    1377/    FE75 : 8D E0                      BSR    RD2ADR   ; READ 2 ADDRESSES
    1378/    FE77 :                     ;* HEX STILL IN TEMPA (BBLK+3) - END ADR
    1379/    FE77 : BD FB 12            PNCH4  JSR    PCRLF
    1380/    FE7A :                     ;* SET NO ECHO FLAG/ TAPE FLAG
 AS V1.42 Beta [Bld 239] - Source File LILBUG.ASM - Page 24 - 04/03/2023 07:40:55 PM


    1381/    FE7A : 86 10                      LDAA   #$10     ; # NULLS W/TAPE CR
    1382/    FE7C : 97 F6                      STAA   OUTSW
    1383/    FE7E : C6 12                      LDAB   #BS.ON   ; TURN PUNCH ON
    1384/    FE80 : 8D D2                      BSR    IO2
    1385/    FE82 : CE 00 D6                   LDX    #BBLK    ; ADR OF BULK STORE BLK
    1386/    FE85 : C6 14                      LDAB   #BS.DTA  ; OFFSET TO BULK ROUTINE
    1387/    FE87 : 8D CB                      BSR    IO2
    1388/    FE89 : 36                         PSHA            ; SAVE FOR RETURN CC
    1389/    FE8A : C6 16                      LDAB   #BS.OFF  ; TURN OFF TAPE
    1390/    FE8C : 8D C6                      BSR    IO2
    1391/    FE8E : BD FD D7                   JSR    CHKABT   ; CLEAR IO BUF
    1392/    FE91 : BD FD D7                   JSR    CHKABT   ; DOUBLE BUF
    1393/    FE94 : 7F 00 F6                   CLR    OUTSW    ; TURN PR ON
    1394/    FE97 : 32                         PULA
    1395/    FE98 : 4D                         TSTA            ; SET RETURN PR
    1396/    FE99 : 39                         RTS
    1397/    FE9A :                     
    1398/    FE9A :                     ;*************** LOAD ***************
    1399/    FE9A :                     ;* L  LOAD A TAPE FILE
    1400/    FE9A :                     ;* L <OFFSET>  LOAD WITH AN OFFSET
    1401/    FE9A :                     ;* SET FUNCTION IN BULK STORE BACKET
    1402/    FE9A :                     ;* IF OFFSET - 3RD, 4TH WRDS OF PACKET = OFFSET
    1403/    FE9A :                     ;* LDX W/ ADR OF TRANSFER PACKET
    1404/    FE9A :                     ;* JMP THRU IO VECTOR TO BSDTA
    1405/    FE9A : C6 01               LOAD   LDAB   #1       ; SET LOAD FCN = 1
    1406/    FE9C : D7 D6               LOAD2  STAB   BBLK
    1407/    FE9E : CE 00 00                   LDX    #0       ; INIT OFFSET=0
    1408/    FEA1 : DF D9                      STX    BBLK+3
    1409/    FEA3 : 81 0D                      CMPA   #$D      ; CR?
    1410/    FEA5 : 27 D0                      BEQ    PNCH4
    1411/    FEA7 : 8D BC                      BSR    PNCH3
    1412/    FEA9 : 20 CC                      BRA    PNCH4
    1413/    FEAB :                     
    1414/    FEAB :                     ;*************** VERIFY ***************
    1415/    FEAB :                     ;* V  VERIFY THAT TAPE LOADED CORRECTLY
    1416/    FEAB :                     ;* V <OFFSET> CHECK PROG LOADED WITH OFFSET CORRECTLY
    1417/    FEAB :                     ;* SET FCN IN BULK STORE PACKET
    1418/    FEAB :                     ;* IF OFFSET - 3RD, 4TH WRDS = OFFSET
    1419/    FEAB :                     ;* LDX W/ ADR OF PACKET
    1420/    FEAB :                     ;* JMP THRU IO VECTOR TO BSDTA
    1421/    FEAB : C6 FF               VERF   LDAB   #$FF
    1422/    FEAD : 20 ED                      BRA    LOAD2
    1423/    FEAF :                     
    1424/    FEAF :                     ;********** BSON **********
    1425/    FEAF :                     ;* TURN PUNCH ON FOR READ OR WRITE
    1426/    FEAF :                     ;* BBLK MUST BE SET - BBLK=0 WRITE
    1427/    FEAF :                     ;*                BBLK#0 ON FOR READ
    1428/    FEAF : 86 11               BSON   LDAA   #$11     ; SET FOR READ
    1429/    FEB1 : 7D 00 D6                   TST    BBLK
    1430/    FEB4 : 26 01                      BNE    BSON2    ; JUMP IF VERF/LOAD
    1431/    FEB6 : 4C                         INCA            ; SET REG A=#12 FOR WRT TAPE
    1432/    FEB7 : 7E F8 09            BSON2  JMP    OUTCH
    1433/    FEBA :                     
    1434/    FEBA :                     ;************** BSOFF ***************
    1435/    FEBA : CE FF 8B            BSOFF  LDX    #PUNOFF  ; TURN PUNCH OFF
    1436/    FEBD : BD FB 07                   JSR    PDATA1   ; OUTPUT STRG & RTN
    1437/    FEC0 : 7E F8 D8                   JMP    DELAY    ; WAIT FOR PRT SYNC
    1438/    FEC3 :                     
    1439/    FEC3 :                     ;********** BSDTA **********
    1440/    FEC3 : 30                  BSDTA  TSX             ; BULK STORE DATA
 AS V1.42 Beta [Bld 239] - Source File LILBUG.ASM - Page 25 - 04/03/2023 07:40:55 PM


    1441/    FEC4 : EE 02                      LDX    2,X      ; GET IO PACK VECTOR
    1442/    FEC6 : A6 00                      LDAA   0,X      ; GET FCN
    1443/    FEC8 : 97 D6                      STAA   BBLK     ; USED BY VERFY/LOAD
    1444/    FECA : 27 59                      BEQ    BSPUN    ; JUMP TO PUNCH, FCN=0
    1445/    FECC :                     ;* FALL THRU TO VERF-BBLK=-1, LOAD-BBLK=1
    1446/    FECC :                     
    1447/    FECC :                     ;* VERIFY, LOAD
    1448/    FECC :                     ;* GET OFFSET FROM IO PACKET
    1449/    FECC :                     ;* FIND S1 REC - DATA
    1450/    FECC :                     ;* READ BYTE CNT (TEMP)
    1451/    FECC :                     ;* READ ADDRESS - SET REG X
    1452/    FECC :                     ;* READ & STORE DATA, COMPUTE CHK SUM
    1453/    FECC :                     ;* COMPARE TAPE TO COMPUTED CKSUM
    1454/    FECC : EC 03                      LDD    3,X      ; GET OFFSET
    1455/    FECE : DD D7                      STD    PNTR
    1456/    FED0 : BD F8 06            LOAD3  JSR    INCHNP   ; READ
    1457/    FED3 : 81 53               LOAD4  CMPA   #'S'     ; GET 1ST GOOD REC
    1458/    FED5 : 26 F9                      BNE    LOAD3
    1459/    FED7 : BD F8 06                   JSR    INCHNP
    1460/    FEDA : 81 39                      CMPA   #'9'
    1461/    FEDC : 27 32                      BEQ    LOAD20   ; FINI AFTER S9
    1462/    FEDE : 81 31                      CMPA   #'1'     ; DATA REC
    1463/    FEE0 : 26 F1                      BNE    LOAD4    ; NO
    1464/    FEE2 : 7F 00 D0                   CLR    CKSUM    ; INIT CHECK SUM
    1465/    FEE5 : 8D 2A                      BSR    BYTE     ; GET BYTE CNT
    1466/    FEE7 : C0 02                      SUBB   #2       ; DECR BYTE CNT FROM IT
    1467/    FEE9 : D7 DB                      STAB   TEMP     ; STORAGE FOR BYTE CNT
    1468/    FEEB :                     ;* READ 4 HEX DIGITS FROM INPUT
    1469/    FEEB :                     ;* FROM ADDRESS AND STORE IN REG X
    1470/    FEEB : 8D 24                      BSR    BYTE     ; 1 BYTE
    1471/    FEED : 37                         PSHB            ; SAVE 1ST BYTE
    1472/    FEEE : 8D 21                      BSR    BYTE     ; 2ND BYTE
    1473/    FEF0 : 32                         PULA            ; GET IST BYTE
    1474/    FEF1 : D3 D7                      ADDD   PNTR     ; ADD OFFSET
    1475/    FEF3 : 37                         PSHB            ; MOVE A:B TO X
    1476/    FEF4 : 36                         PSHA
    1477/    FEF5 : 38                         PULX            ; SET REG X = ADR
    1478/    FEF6 :                     ;* STORE DATA
    1479/    FEF6 : 8D 19               LOAD11 BSR    BYTE     ; GET BYTE IN REG B
    1480/    FEF8 : 7A 00 DB                   DEC    TEMP     ; DEC BYTE CNT
    1481/    FEFB : 27 0E                      BEQ    LOAD15   ; END REC?
    1482/    FEFD : 7D 00 D6                   TST    BBLK     ; SKIP IF VEFY
    1483/    FF00 : 2B 02                      BMI    LOAD12   ; JUST COMPARE
    1484/    FF02 : E7 00                      STAB   0,X
    1485/    FF04 : E1 00               LOAD12 CMPB   0,X
    1486/    FF06 : 26 06                      BNE    LOAD19   ; ERROR
    1487/    FF08 : 08                         INX
    1488/    FF09 : 20 EB                      BRA    LOAD11
    1489/    FF0B :                     ;* CHECKSUMS GOOD?
    1490/    FF0B :                     ;* CKSUM IS ONE'S COMPLE
    1491/    FF0B : 4C                  LOAD15 INCA            ; CHKSUM ADDED INTO B
    1492/    FF0C : 27 C2                      BEQ    LOAD3    ; GET NEXT REC
    1493/    FF0E :                     ;* CHECKSUM ERROR, VERFY FAILURE, LOAD FAIL ERR
    1494/    FF0E : 86 FF               LOAD19 LDAA   #$FF     ; SET NEG FOR ER RTN
    1495/    FF10 : 39                  LOAD20 RTS
    1496/    FF11 :                     
    1497/    FF11 :                     ;*************** BYTE ***************
    1498/    FF11 :                     ;* FORM A HEX BYTE FROM 2 DISPLAY BYTES
    1499/    FF11 :                     ;* CALL INHEX TO READ 1 HEX DIGIT FROM INPUT
    1500/    FF11 : 5F                  BYTE   CLRB            ; READ A-F AS HEX
 AS V1.42 Beta [Bld 239] - Source File LILBUG.ASM - Page 26 - 04/03/2023 07:40:55 PM


    1501/    FF12 : BD FA 3F                   JSR    INHEX
    1502/    FF15 : C6 10                      LDAB   #16
    1503/    FF17 : 3D                         MUL             ; LSB IN REG B
    1504/    FF18 : 37                         PSHB            ; SAVE
    1505/    FF19 : 5F                         CLRB
    1506/    FF1A : BD FA 3F                   JSR    INHEX
    1507/    FF1D : 33                         PULB
    1508/    FF1E : 1B                         ABA             ; GET 1 BYTE
    1509/    FF1F : 16                         TAB             ; SAVE IN B
    1510/    FF20 : 9B D0                      ADDA   CKSUM
    1511/    FF22 : 97 D0                      STAA   CKSUM
    1512/    FF24 : 39                         RTS
    1513/    FF25 :                     
    1514/    FF25 :                     ;********** BSDTA - PUNCH **********
    1515/    FF25 :                     ;* MOVE FROM & TO ADDRESSES TO STORAGE
    1516/    FF25 :                     ;* PNTR - FROM ADR   TEMPA - TO ADR
    1517/    FF25 :                     ;* BBLK - REVSED FOR FRAME CNT
    1518/    FF25 :                     ;* TEMP - REVSED FOR BYTE CNT
    1519/    FF25 :                     ;* PUNCH NULLS AS LEADER ON TAPE
    1520/    FF25 :                     ;* PUNCH CR/LF, NULL, S1(RECORD TYPE),
    1521/    FF25 :                     ;*       FRAME COUNT, ADDRESS, DATA, CHECKSUM
    1522/    FF25 :                     ;* EOF RECORD - S9030000FC
    1523/    FF25 : EC 01               BSPUN  LDD    1,X      ; GET FROM ADR
    1524/    FF27 : DD D7                      STD    PNTR
    1525/    FF29 : EC 03                      LDD    3,X      ; GET TO ADR
    1526/    FF2B : DD D9                      STD    TEMPA
    1527/    FF2D :                     ;* PUNCH LEADER
    1528/    FF2D : C6 19                      LDAB   #25
    1529/    FF2F : 4F                  PNULL  CLRA            ; OUTPUT NULL CHAR
    1530/    FF30 : BD F8 09                   JSR    OUTCH
    1531/    FF33 : 5A                         DECB
    1532/    FF34 : 26 F9                      BNE    PNULL    ; LOOP IF NOT FINI
    1533/    FF36 : DC D9               PUN11  LDD    TEMPA
    1534/    FF38 : D0 D8                      SUBB   PNTR+1
    1535/    FF3A : 92 D7                      SBCA   PNTR     ; FROM ADR < TO ADR
    1536/    FF3C : 26 04                      BNE    PUN22
    1537/    FF3E : C1 18                      CMPB   #24
    1538/    FF40 : 25 02                      BCS    PUN23
    1539/    FF42 : C6 17               PUN22  LDAB   #23      ; SET FRAME CNT
    1540/    FF44 : CB 04               PUN23  ADDB   #4
    1541/    FF46 : D7 D6                      STAB   BBLK
    1542/    FF48 : C0 03                      SUBB   #3
    1543/    FF4A : D7 DB                      STAB   TEMP     ; BYTE CNT THIS REC
    1544/    FF4C :                     ;* PUNCH CR/LF, NULLS,S,1
    1545/    FF4C : CE FF A2                   LDX    #MTAPE
    1546/    FF4F : BD FB 0E                   JSR    PDATA
    1547/    FF52 : 5F                         CLRB            ; ZERO CHKSUM
    1548/    FF53 :                     ;* PUNCH FRAME CNT
    1549/    FF53 : CE 00 D6                   LDX    #BBLK
    1550/    FF56 : 8D 29                      BSR    PUNT2    ; PUNCH 2 HEX CHAR
    1551/    FF58 :                     ;* PUNCH ADDRESS
    1552/    FF58 : CE 00 D7                   LDX    #PNTR
    1553/    FF5B : 8D 24                      BSR    PUNT2
    1554/    FF5D : 08                         INX
    1555/    FF5E : 8D 21                      BSR    PUNT2
    1556/    FF60 :                     ;* PUNCH DATA
    1557/    FF60 : DE D7                      LDX    PNTR
    1558/    FF62 : 8D 1D               PUN32  BSR    PUNT2    ; PUNCH 1BYTE (2 FRAMES)
    1559/    FF64 : 08                         INX             ; INCR X PNTR
    1560/    FF65 : 7A 00 DB                   DEC    TEMP     ; DECR BYTE CNT
 AS V1.42 Beta [Bld 239] - Source File LILBUG.ASM - Page 27 - 04/03/2023 07:40:55 PM


    1561/    FF68 : 26 F8                      BNE    PUN32
    1562/    FF6A : DF D7                      STX    PNTR
    1563/    FF6C : 53                         COMB
    1564/    FF6D : 37                         PSHB
    1565/    FF6E : 30                         TSX
    1566/    FF6F : 8D 10                      BSR    PUNT2    ; PUNCH CHKSUM
    1567/    FF71 : 33                         PULB            ; RESTORE
    1568/    FF72 : DE D7                      LDX    PNTR
    1569/    FF74 : 09                         DEX
    1570/    FF75 : 9C D9                      CPX    TEMPA
    1571/    FF77 : 26 BD                      BNE    PUN11
    1572/    FF79 : CE FF A5                   LDX    #MEOF    ; PUNCH EOF
    1573/    FF7C : BD FB 0E                   JSR    PDATA
    1574/    FF7F : 4F                         CLRA            ; CLEAR CC FOR RETURN
    1575/    FF80 : 39                         RTS
    1576/    FF81 :                     ;* PUNCH 2 HEX CHAR, UPDATE CHKSUM
    1577/    FF81 : EB 00               PUNT2  ADDB   0,X
    1578/    FF83 : 7E FA E1                   JMP    OUT2H    ; OUTPUT 2 HEX & RTN
    1579/    FF86 :                     
    1580/    FF86 :                     ;********** ROM DATA **********
    1581/    FF86 : 10 3A 10 39 04      PRTON  FCB    $10,$3A,$10,$39,4 ; TURN ON PRT
    1582/    FF8B : 14 13               PUNOFF FCB    $14,$13  ; TAPE CONTROL
    1583/    FF8D : 04                         FCB    4        ; EOF
    1584/    FF8E : 3F 04               QMARK  FCB    $3F,4    ; PR ?
    1585/    FF90 : 4C 49 4C 42 55 47   LIL    FCC    'LILBUG 1.0'
             FF96 : 20 31 2E 30       
    1586/    FF9A : 04                         FCB    4
    1587/    FF9B : 4E 4F 20 43 48 47   NOCHG  FCC    'NO CHG'
    1588/    FFA1 : 04                         FCB    4        ; EOF
    1589/    FFA2 : 53 31 04            MTAPE  FCB    'S','1',4
    1590/    FFA5 : 53 39 30 33 30 30   MEOF   FCC    'S9030000FC'
             FFAB : 30 30 46 43       
    1591/    FFAF : 0D 04                      FCB    $D,4
    1592/    FFB1 : 4F 50 2D            PRTOP  FCC    'OP-'    ; PRT FOR TRACE LINE
    1593/    FFB4 : 04                         FCB    4
    1594/    FFB5 : 50 01               ARRAY  FCB    'P',1     ; ARRAY OF REG AND WRD LEN
    1595/    FFB7 : 58 01                      FCB    'X',1
    1596/    FFB9 : 41 00                      FCB    'A',0
    1597/    FFBB : 42 00                      FCB    'B',0
    1598/    FFBD : 43 00                      FCB    'C',0
    1599/    FFBF : 53 01                      FCB    'S',1
    1600/    FFC1 : 20 20 20 20 20 20   SPACE6 FCC    '      ' ; 6 SPACES FOR SHOW HEADER
    1601/    FFC7 : 04                         FCB    4
    1602/    FFC8 :                     
    1603/    FFC8 :                     ;*************** VECTORS ***************
    1604/    FFC8 :                     ;* VECTOR INDEPENDENCE
    1605/    FFC8 :                     ;* ALSO SAVE ON RAM USAGE
    1606/    FFC8 :                     ;* VECTORP - RAM PNTR TO VECTOR TABLE
    1607/    FFC8 :                     ;* VECTOR TABLE - ADR OF INTERRUPT VECTORS
    1608/    FFC8 :                     ;* MAY BE REDEFINED BY USER TABLE IN SAME FORM
    1609/    FFC8 : FC E1               SERIAL FDB    DUMMY
    1610/    FFCA : FC E1               TIMOVF FDB    DUMMY
    1611/    FFCC : FC E1               TIMOUT FDB    DUMMY
    1612/    FFCE : FC E1               TIMIN  FDB    DUMMY
    1613/    FFD0 : FC E1               IRQ1   FDB    DUMMY
    1614/    FFD2 : F8 21               SWI    FDB    IN.SWI
    1615/    FFD4 : F8 03               NMI    FDB    IN.NMI
    1616/    FFD6 :                     ;* DUMMY IS AN RTI
    1617/    FFD6 :                     
    1618/    FFD6 :                            ORG    $FFD6
 AS V1.42 Beta [Bld 239] - Source File LILBUG.ASM - Page 28 - 04/03/2023 07:40:55 PM


    1619/    FFD6 :                     ;* USE ADR ON STK TO OBTAIN INDEX
    1620/    FFD6 :                     ;* USE INDEX TO GET CORRECT VECTOR
    1621/    FFD6 :                     ;*    ROUTINE ADR FROM VECTOR TABLE.
    1622/    FFD6 : 32                  VECTOR PULA            ; THROW AWAY MSB OF ADR
    1623/    FFD7 : 33                         PULB            ; GET LSB
    1624/    FFD8 : 83 FF E4                   SUBD   #I.SER+2
    1625/    FFDB : DE FE                      LDX    VECPTR   ; ADR OF VECTOR TABLE
    1626/    FFDD : 3A                         ABX             ; ADD OFSET
    1627/    FFDE : EE 00                      LDX    0,X      ; GET VECTOR ADR
    1628/    FFE0 : 6E 00                      JMP    0,X      ; GO THRU VECTOR
    1629/    FFE2 :                     
    1630/    FFE2 :                     ;* INTERRUPTS GO THRU VECTORS, THEN HERE
    1631/    FFE2 :                     ;* BSR STORES ADR ON STACK
    1632/    FFE2 :                     ;* ADR USED TO OBTAIN INDEX INTO VECTOR TABL
    1633/    FFE2 : 8D F2               I.SER  BSR    VECTOR
    1634/    FFE4 : 8D F0               I.TOVF BSR    VECTOR
    1635/    FFE6 : 8D EE               I.TOVT BSR    VECTOR
    1636/    FFE8 : 8D EC               I.TIN  BSR    VECTOR
    1637/    FFEA : 8D EA               I.IRQ1 BSR    VECTOR
    1638/    FFEC : 8D E8               I.SWI  BSR    VECTOR
    1639/    FFEE : 8D E6               I.NMI  BSR    VECTOR
    1640/    FFF0 :                     
    1641/    FFF0 :                     ;* INTERRUPT VECTORS
    1642/    FFF0 : FF E2               VECTR  FDB    I.SER
    1643/    FFF2 : FF E4                      FDB    I.TOVF
    1644/    FFF4 : FF E6                      FDB    I.TOVT
    1645/    FFF6 : FF E8                      FDB    I.TIN
    1646/    FFF8 : FF EA                      FDB    I.IRQ1
    1647/    FFFA : FF EC                      FDB    I.SWI
    1648/    FFFC : FF EE                      FDB    I.NMI
    1649/    FFFE : F8 1E                      FDB    STRT
    1650/   10000 :                            END    START
 AS V1.42 Beta [Bld 239] - Source File LILBUG.ASM - Page 29 - 04/03/2023 07:40:55 PM


  Symbol Table (* = unused):
  --------------------------

*ARCHITECTURE :                                      "x86_64-unknown-linux" - |
 ARMS04 :                      FCE9 C |  ARMSTK :                      FCBA C |
 ARRAY :                       FFB5 C |  BARMS :                       FC56 C |
 BBLK :                          D6 C |  BERRTN :                      FBE9 C |
 BKADR :                         E6 C |  BKPERR :                      FD7A C |
 BP02 :                        FBAD C |  BP04 :                        FBB8 C |
 BP06 :                        FBC5 C |  BRKFLG :                        F2 C |
 BRKPNT :                      FB98 C |  BRKTAB :                      FBD9 C |
 BRTN :                        FBEB C |  BS.DTA :                        14 - |
 BS.OFF :                        16 - |  BS.ON :                         12 - |
 BSDTA :                       FEC3 C |  BSOFF :                       FEBA C |
 BSON :                        FEAF C |  BSON2 :                       FEB7 C |
 BSPUN :                       FF25 C |  BYTE :                        FF11 C |
 C.NMI :                       FC79 C |  CALL :                        FC0F C |
 CALLF :                         F7 C | *CASESENSITIVE :                  0 - |
 CHK2 :                        FDE5 C |  CHKABT :                      FDD7 C |
 CHRNL :                         D5 C |  CI :                          F85B C |
 CI.DTA :                         2 - | *CI.OFF :                         4 - |
*CI.ON :                          0 - |  CIDTA :                       F891 C |
 CIDTA1 :                      F899 C |  CIDTA2 :                      F89C C |
 CIOFF :                       F8D1 - |  CION :                        F8C8 C |
 CKSUM :                         D0 - |  CLOCK :                          9 - |
 CLRAM :                       F918 C |  CNTLW :                         17 - |
 CNTLX :                         18 - |  CO.DTA :                         8 - |
*CO.OFF :                         A - |  CO.ON :                          6 - |
 CODTA :                       F8A8 C | *CONSTPI :        3.141592653589793 - |
 COOFF :                       F8D1 C |  COON :                        F8D2 C |
*COON2 :                       F8D5 C |  CRTN :                        F8A7 C |
 CRTS :                        FC58 C |  CT :                            D0 C |
*DATE :                "04/03/2023" - |  DBRK2 :                       FBFD C |
 DBRK6 :                       FC05 C |  DELAY :                       F8D8 C |
 DELBRK :                      FBEC C |  DISPLY :                      FD86 C |
 DLY :                         F8DB C |  DUMMY :                       FCE1 - |
 ENDCAL :                      FD7A - |  EX.NMI :                      F800 C |
 EXONE :                         F5 C | *FALSE :                          0 - |
 FCTABL :                      F824 - |  FCTPTR :                        FA C |
 GOX2 :                        FBE9 - |  GOX6 :                        FC23 C |
 GOX7 :                        FC38 C |  GOX8 :                        FC3F C |
 GOXQT :                       FC11 C | *HAS64 :                          1 - |
 HS.DTA :                         E - |  HS.OFF :                        10 - |
 HS.ON :                          C - |  HSDTA :                       FDEC C |
 HSOFF :                       F8D1 - |  HSON :                        F8D1 - |
 HY :                          F8F1 C |  I.IRQ1 :                      FFEA C |
 I.NMI :                       FFEE C |  I.SER :                       FFE2 C |
 I.SWI :                       FFEC C |  I.TIN :                       FFE8 C |
 I.TOVF :                      FFE4 C |  I.TOVT :                      FFE6 C |
 IFPTM :                       FCEA C |  IFPTM2 :                      FCF7 C |
 IN.NMI :                      F803 C |  IN.SWI :                      F821 C |
 IN1HG :                       FA57 C |  INCH1 :                       F873 C |
 INCH15 :                      F874 C | *INCH2 :                       F876 C |
 INCH4 :                       F888 C |  INCHNP :                      F806 C |
 INDAT :                       FB4D C |  INDAT0 :                      FB69 C |
 INDAT1 :                      FB84 C |  INDAT2 :                      FB75 C |
 INDAT4 :                      FB81 C |  INDAT5 :                      FB6D C |
 INHEX :                       FA3F C |  INPTM :                       F940 C |
 INPUT :                       FA0D C |  INPUT2 :                      FA0E C |
 INPUT3 :                      FA18 C |  INPUT5 :                      FA1E C |
 AS V1.42 Beta [Bld 239] - Source File LILBUG.ASM - Page 30 - 04/03/2023 07:40:55 PM


 INPUT6 :                      FA27 C |  INPUT7 :                      FA33 C |
 INPUT9 :                      FA3A C |  INPUTA :                      FA09 C |
 INPUTC :                      FA3C C |  IO :                          F8DF C |
 IO2 :                         FE54 C |  IOPTR :                         FC C |
*IRQ1 :                        FFD0 C |  LIL :                         FF90 C |
*LISTON :                         1 - |  LOAD :                        FE9A C |
 LOAD11 :                      FEF6 C |  LOAD12 :                      FF04 C |
 LOAD15 :                      FF0B C |  LOAD19 :                      FF0E C |
 LOAD2 :                       FE9C C |  LOAD20 :                      FF10 C |
 LOAD3 :                       FED0 C |  LOAD4 :                       FED3 C |
 LOWRAM :                        80 - |  M.NMI :                       FC7E C |
 M.SWI :                       FD5F C | *MACEXP :                         7 - |
 MAIN :                        F952 C |  MAIN01 :                      F971 C |
 MAIN03 :                      F984 C |  MAIN07 :                      F9C3 C |
 MAIN08 :                      F9E5 C |  MEM01 :                       FA5F C |
 MEM02 :                       FA69 C |  MEM03 :                       FA7D C |
 MEM04 :                       FA8F C |  MEM06 :                       FA99 C |
 MEM08 :                       FAA0 C |  MEM10 :                       FAA4 C |
 MEM12 :                       FAA6 C |  MEM25 :                       FA6B C |
 MEM33 :                       FA88 C |  MEMORY :                      FA5B C |
 MEMSL :                       FAA8 - |  MEOF :                        FFA5 C |
 MERROR :                      F9BD C |  MERRTN :                      FAB1 C |
 MODE :                           3 - | *MOMCPU :                      6801 - |
*MOMCPUNAME :                "6801" - |  MOVSTK :                      FCFD C |
 MTAPE :                       FFA2 C |  N1 :                          F8B0 C |
 N3 :                          F8BC C |  N4 :                          F8BE C |
*NESTMAX :                      100 - |  NEXT :                        FC41 C |
 NEXTX :                         D3 C | *NMI :                         FFD4 C |
 NMI01 :                       FC95 C |  NMI015 :                      FC96 C |
 NMI02 :                       FC9D C |  NMI03 :                       FCB7 C |
 NOCHG :                       FF9B C |  NOTHEX :                      FA37 - |
 NTRACE :                        F3 C |  NUMBP :                          4 - |
 OCREG :                          B - |  OFF4 :                        FAC7 C |
 OFFG :                        FACB C |  OFFSET :                      FAB4 C |
 OPCODE :                        EE C |  OUT2H :                       FAE1 C |
 OUT2HS :                      FADB C |  OUT4HS :                      FAD8 C |
 OUTC :                        F89D C |  OUTC1 :                       F89E C |
 OUTCH :                       F809 C |  OUTCH1 :                      F88A C |
 OUTDA :                       FB91 C |  OUTHL :                       FAE9 C |
 OUTHR :                       FAED C |  OUTSW :                         F6 C |
 OVFL :                          DC C |  P2DDR :                          1 - |
*PADDING :                        0 - |  PCR :                         FB16 C |
 PCRLF :                       FB12 C |  PDATA :                       FB0E C |
 PDATA1 :                      FB07 C |  PDATA2 :                      FB04 C |
 PNCH3 :                       FE65 C |  PNCH4 :                       FE77 C |
 PNCHER :                      FE6E C |  PNCRTN :                      FE71 C |
 PNTR :                          D7 C |  PNULL :                       FF2F C |
 PRBK2 :                       FBD1 C |  PRBRK :                       FBC9 C |
 PREGS :                       FB88 C |  PREGS1 :                      FB86 C |
 PRERR :                       FB71 C |  PRTON :                       FF86 C |
 PRTOP :                       FFB1 C |  PRTTL :                       FE01 C |
 PTM :                           F8 C |  PTMADR :                      E000 - |
 PUN11 :                       FF36 C |  PUN22 :                       FF42 C |
 PUN23 :                       FF44 C |  PUN32 :                       FF62 C |
 PUNCH :                       FE72 C |  PUNOFF :                      FF8B C |
 PUNT2 :                       FF81 C |  PVALIN :                      FDE9 C |
 QMARK :                       FF8E C |  RBRK :                        FD15 C |
 RBRK2 :                       FD1E C |  RBRK3 :                       FD2A C |
 RBRK6 :                       FD35 C |  RD2ADR :                      FE57 C |
 RECEV :                         12 - |  REGS1 :                       FB22 C |
 AS V1.42 Beta [Bld 239] - Source File LILBUG.ASM - Page 31 - 04/03/2023 07:40:55 PM


 REGS2 :                       FB26 C |  REGS3 :                       FB42 C |
 REGS4 :                       FB3D C |  REGS6 :                       FB46 C |
 REGSTR :                      FB1E C | *RELAXED :                        0 - |
 RETRN :                       FAB3 C |  RMCR :                          10 - |
 S120 :                        F8E9 C |  S1205 :                       F8EC C |
 SAVSTK :                        DD C |  SERIAL :                      FFC8 C |
 SETB :                        FD36 C |  SETB2 :                       FD3F C |
 SETB4 :                       FD54 C |  SETB6 :                       FD5E C |
 SETCLK :                      FC71 C |  SETPTM :                      FCE2 C |
 SHOW10 :                      FE11 C |  SHOW12 :                      FE22 C |
 SHOW14 :                      FE30 C |  SHOW16 :                      FE3C C |
 SHOW18 :                      FE3E C |  SHOW19 :                      FDE8 C |
 SHOW35 :                      FD97 C |  SHOW4 :                       FDAD C |
 SHOW8 :                       FDC1 C |  SHOW9 :                       FDF7 C |
 SPACE :                       FADD C |  SPACE6 :                      FFC1 C |
 SPSAVE :                        E4 C |  SRCH :                        F99B C |
 SRCH01 :                      F9A1 C |  SRCH02 :                      F9B9 C |
 SRCH03 :                      F9C5 C |  SRCH04 :                      F9C9 C |
 SRCH05 :                      F9D7 C |  STACK :                         CF C |
 START :                       F8F6 C |  STRCHK :                      FAF7 C |
 STRT :                        F81E C |  STRTX :                         D1 C |
 SWERR :                       FDAA C |  SWERR2 :                      FDA7 C |
*SWI :                         FFD2 C |  SWI3 :                        FD7E C |
 TAB1 :                        FBDC C |  TCSR :                           8 - |
 TEMP :                          DB C |  TEMPA :                         D9 C |
 TERM :                        F9EB C |  TERM02 :                      F9F9 C |
*TIME :               "07:40:55 PM" - | *TIMIN :                       FFCE C |
*TIMOUT :                      FFCC C | *TIMOVF :                      FFCA C |
 TRACE :                       FC46 C |  TRACE2 :                      FC4F C |
 TRANS :                         13 - |  TRCS :                          11 - |
*TRUE :                           1 - |  VALIN :                       F9FC C |
 VALINP :                      F9FA C |  VALRTN :                      FA08 C |
 VECPTR :                        FE C |  VECTOR :                      FFD6 C |
 VECTR :                       FFF0 C |  VERF :                        FEAB C |
*VERSION :                     142F - |  XOUTCH :                      FB1B C |
 ZOUTCH :                      FB95 C |

    304 symbols
     27 unused symbols

 AS V1.42 Beta [Bld 239] - Source File LILBUG.ASM - Page 32 - 04/03/2023 07:40:55 PM


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

0.01 seconds assembly time

   1651 lines source file
      2 passes
      0 errors
      0 warnings
